"use strict";(self.webpackChunkcarbondesignsystem=self.webpackChunkcarbondesignsystem||[]).push([[46445],{50024:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return l},default:function(){return g}});var a=n(45987),r=(n(67294),n(3905)),o=n(3624),i=n(69296);const p=["components"],l={},s=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},c=s("PageDescription"),d=s("AnchorLinks"),u=s("AnchorLink"),m=s("InlineNotification"),h={_frontmatter:l},k=o.Z;function g(e){let{components:t}=e,n=(0,a.Z)(e,p);return(0,r.kt)(k,Object.assign({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(c,{mdxType:"PageDescription"},(0,r.kt)("p",null,"Starting with Create React App, let’s install Carbon and begin using Carbon\ncomponents. By the end you will have a React app that uses the UI Shell to\nnavigate between pages.")),(0,r.kt)(d,{mdxType:"AnchorLinks"},(0,r.kt)(u,{mdxType:"AnchorLink"},"Fork, clone and branch"),(0,r.kt)(u,{mdxType:"AnchorLink"},"Build and start"),(0,r.kt)(u,{mdxType:"AnchorLink"},"Install Carbon"),(0,r.kt)(u,{mdxType:"AnchorLink"},"Install and build Sass"),(0,r.kt)(u,{mdxType:"AnchorLink"},"Add UI Shell"),(0,r.kt)(u,{mdxType:"AnchorLink"},"Create pages"),(0,r.kt)(u,{mdxType:"AnchorLink"},"Add routing"),(0,r.kt)(u,{mdxType:"AnchorLink"},"Submit pull request")),(0,r.kt)("h2",null,"Preview"),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{parentName:"p",href:"https://v11-react-step-2--carbon-tutorial.netlify.app"},"preview")," of what you\nwill build:"),(0,r.kt)(i.Z,{height:"200",title:"Carbon Tutorial Step 1",src:"https://v11-react-step-2--carbon-tutorial.netlify.app",frameBorder:"no",allowtransparency:"true",allowFullScreen:"true",mdxType:"Preview"}),(0,r.kt)("h2",null,"Fork, clone and branch"),(0,r.kt)("p",null,"This tutorial has an accompanying GitHub repository called\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/carbon-design-system/carbon-tutorial"},"carbon-tutorial")," that\nwe’ll use as a starting point for each step."),(0,r.kt)("h3",null,"Fork"),(0,r.kt)("p",null,"To begin, fork\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/carbon-design-system/carbon-tutorial"},"carbon-tutorial")," using\nyour GitHub account."),(0,r.kt)("h3",null,"Clone"),(0,r.kt)("p",null,"Go to your forked repository, copy the SSH or HTTPS URL and in your terminal run\nthe two commands to get the repository in your local file system and enter that\ndirectory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone [your fork SSH/HTTPS]\ncd carbon-tutorial\n")),(0,r.kt)("h3",null,"Add upstream remote"),(0,r.kt)("p",null,"Add a remote called ",(0,r.kt)("inlineCode",{parentName:"p"},"upstream")," so we can eventually submit a pull request once\nyou have completed this tutorial step. There are two choices: SSH or HTTPS"),(0,r.kt)("h4",null,"SSH"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git remote add upstream git@github.com:carbon-design-system/carbon-tutorial.git\n")),(0,r.kt)("h4",null,"HTTPS"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git remote add upstream https://github.com/carbon-design-system/carbon-tutorial.git\n")),(0,r.kt)("p",null,"Verify that your forked repository remotes are correct:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git remote -v\n")),(0,r.kt)("p",null,"Your terminal should output something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"origin  [your forked repo] (fetch)\norigin  [your forked repo] (push)\nupstream    git@github.com:carbon-design-system/carbon-tutorial.git (fetch)\nupstream    git@github.com:carbon-design-system/carbon-tutorial.git (push)\n")),(0,r.kt)("h3",null,"Branch"),(0,r.kt)("p",null,"Now that we have our repository set up, let’s check out the branch for this\ntutorial step’s starting point. Run the two commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git fetch upstream\ngit checkout -b v11-react-step-1 upstream/v11-react-step-1\n")),(0,r.kt)("h2",null,"Build and start"),(0,r.kt)("p",null,"We have the repository forked to your GitHub account, cloned down to your\nmachine, and the starting branch checked out. Next, install the React app’s\ndependencies with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn\n")),(0,r.kt)("p",null,"After the dependencies are installed, you can start the app with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn start\n")),(0,r.kt)("p",null,"Your default browser should open up with an empty page that says:\n",(0,r.kt)("inlineCode",{parentName:"p"},"Hello Carbon! Well, not quite yet. This is the starting point for the Carbon tutorial.")),(0,r.kt)("h2",null,"Install Carbon"),(0,r.kt)("p",null,"Even though we installed existing dependencies, we’ve yet to install our v11\nCarbon package, ",(0,r.kt)("inlineCode",{parentName:"p"},"@carbon/react"),", which contains everything you need to build\nwith."),(0,r.kt)("p",null,"Stop your development server with ",(0,r.kt)("inlineCode",{parentName:"p"},"CTRL-C")," and install Carbon dependencies with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @carbon/react@1.1.0\n")),(0,r.kt)("h2",null,"Install and build Sass"),(0,r.kt)("p",null,"We need to run a Sass build as the Carbon styles are authored in Sass, so run\nthe following command to install ",(0,r.kt)("inlineCode",{parentName:"p"},"sass")," as a dependency."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add sass@1.51.0\n")),(0,r.kt)("p",null,"Then, start the app again. If your app’s currently running, you’ll need to\nrestart it for the new environment variable to be used."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn start\n")),(0,r.kt)("p",null,"The app looks as it did before. Next, let’s prepare our app for a Sass build."),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," directory, rename ",(0,r.kt)("inlineCode",{parentName:"p"},"index.css")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"index.scss"),". Then in ",(0,r.kt)("inlineCode",{parentName:"p"},"index.js"),"\nupdate the ",(0,r.kt)("inlineCode",{parentName:"p"},"index.css")," import to ",(0,r.kt)("inlineCode",{parentName:"p"},"index.scss"),"."),(0,r.kt)("h3",null,"Import carbon-component styles"),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"index.scss"),", import the Carbon styles by adding the following at the top of\nthe file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scss",metastring:"path=src/index.scss",path:"src/index.scss"},"@use '@carbon/react';\n")),(0,r.kt)("p",null,"Making this change to ",(0,r.kt)("inlineCode",{parentName:"p"},"index.scss")," will cause all of the Carbon Sass to\nre-compile. Once finished re-compiling the Carbon base styling is applied (IBM\nPlex Sans font family, font size, weight, colors, etc.)"),(0,r.kt)("p",null,"Re-compiling all of the Carbon Sass takes a while, even on fast systems. Let’s\nspeed this up by moving our custom app Sass into a separate file, ",(0,r.kt)("inlineCode",{parentName:"p"},"app.scss")," in\nthe ‘src’ directory, and import that from ",(0,r.kt)("inlineCode",{parentName:"p"},"App.js"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"path=src/App.js",path:"src/App.js"},"import './app.scss';\n")),(0,r.kt)("p",null,"By modifying ",(0,r.kt)("inlineCode",{parentName:"p"},"index.scss")," as little as possible and storing all app-specific\nstyling in ",(0,r.kt)("inlineCode",{parentName:"p"},"app.scss")," we will make compile times much quicker. Storing the\napp-specific styling in a separate file also makes good organizational sense."),(0,r.kt)("p",null,"Next, we’ll import a ",(0,r.kt)("inlineCode",{parentName:"p"},"Button")," from Carbon to test that our dependencies are\nworking properly. At the top of ",(0,r.kt)("inlineCode",{parentName:"p"},"App.js"),", import the ",(0,r.kt)("inlineCode",{parentName:"p"},"Button")," by adding the\nfollowing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"path=src/App.js",path:"src/App.js"},"import { Button } from '@carbon/react';\n")),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"App")," component return, you can now replace:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:"path=src/App.js",path:"src/App.js"},"<div>\n  Hello Carbon! Well, not quite yet. This is the starting point for the Carbon\n  tutorial.\n</div>\n")),(0,r.kt)("p",null,"with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"path=src/App.js",path:"src/App.js"},"<Button>Button</Button>\n")),(0,r.kt)("p",null,"Congratulations, you’ve imported your first component! You should see a Carbon\nstyled button on the page."),(0,r.kt)("h2",null,"Add UI Shell"),(0,r.kt)("p",null,"Next, we’re going to create a React component called ",(0,r.kt)("inlineCode",{parentName:"p"},"TutorialHeader")," to use\nwith the UI Shell Carbon component. In the ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," directory, create a\n",(0,r.kt)("inlineCode",{parentName:"p"},"components")," directory and inside of that, a ",(0,r.kt)("inlineCode",{parentName:"p"},"TutorialHeader")," directory. Create\nthe following files inside ",(0,r.kt)("inlineCode",{parentName:"p"},"src/components/TutorialHeader"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"src/components/TutorialHeader\n├──_tutorial-header.scss\n├──index.js\n└──TutorialHeader.js\n")),(0,r.kt)("h3",null,"Add UI Shell Sass"),(0,r.kt)("p",null,"Next, in ",(0,r.kt)("inlineCode",{parentName:"p"},"app.scss"),", we’ll import our ",(0,r.kt)("inlineCode",{parentName:"p"},"TutorialHeader")," styles. Your file should\nnow look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scss",metastring:"path=src/app.scss",path:"src/app.scss"},"@use './components/TutorialHeader/tutorial-header';\n")),(0,r.kt)("h3",null,"Import and export the header"),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"src/components/TutorialHeader/index.js"),", import and export our\n",(0,r.kt)("inlineCode",{parentName:"p"},"TutorialHeader")," component like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"path=src/components/TutorialHeader/index.js",path:"src/components/TutorialHeader/index.js"},"import TutorialHeader from './TutorialHeader';\nexport default TutorialHeader;\n")),(0,r.kt)("p",null,"Next we’ll import our Carbon UI Shell components into ",(0,r.kt)("inlineCode",{parentName:"p"},"TutorialHeader.js"),". Set\nup the file like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"path=src/components/TutorialHeader/TutorialHeader.js",path:"src/components/TutorialHeader/TutorialHeader.js"},'import React from \'react\';\nimport {\n  Header,\n  HeaderContainer,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuButton,\n  HeaderMenuItem,\n  HeaderGlobalBar,\n  HeaderGlobalAction,\n  SkipToContent,\n  SideNav,\n  SideNavItems,\n  HeaderSideNavItems,\n} from \'@carbon/react\';\n\nconst TutorialHeader = () => (\n  <HeaderContainer\n    render={({ isSideNavExpanded, onClickSideNavExpand }) => (\n      <Header aria-label="Carbon Tutorial">\n        <SkipToContent />\n        <HeaderMenuButton\n          aria-label="Open menu"\n          onClick={onClickSideNavExpand}\n          isActive={isSideNavExpanded}\n        />\n        <HeaderName href="/" prefix="IBM">\n          Carbon Tutorial\n        </HeaderName>\n        <HeaderNavigation aria-label="Carbon Tutorial">\n          <HeaderMenuItem href="/repos">Repositories</HeaderMenuItem>\n        </HeaderNavigation>\n        <SideNav\n          aria-label="Side navigation"\n          expanded={isSideNavExpanded}\n          isPersistent={false}\n        >\n          <SideNavItems>\n            <HeaderSideNavItems>\n              <HeaderMenuItem href="/repos">Repositories</HeaderMenuItem>\n            </HeaderSideNavItems>\n          </SideNavItems>\n        </SideNav>\n        <HeaderGlobalBar />\n      </Header>\n    )}\n  />\n);\n\nexport default TutorialHeader;\n')),(0,r.kt)(m,{mdxType:"InlineNotification"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," you can find a description of the different components used in the UI\nShell in our\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/carbon-design-system/carbon/tree/main/packages/react/src/components/UIShell"},"@carbon/react"),"\npackage.")),(0,r.kt)(m,{mdxType:"InlineNotification"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," When creating navigation headers, it’s important to have a\n",(0,r.kt)("inlineCode",{parentName:"p"},"Skip to content")," link so keyboard users can skip the navigation items and go\nstraight to the main content.")),(0,r.kt)("h3",null,"Import icons"),(0,r.kt)("p",null,"Now let’s import the icons. In the ",(0,r.kt)("inlineCode",{parentName:"p"},"TutorialHeader.js")," file, we need to import\neach individual icon we will use."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"path=src/components/TutorialHeader/TutorialHeader.js",path:"src/components/TutorialHeader/TutorialHeader.js"},"import { Switcher, Notification, UserAvatar } from '@carbon/react/icons';\n")),(0,r.kt)("p",null,"Then we need to add the ",(0,r.kt)("inlineCode",{parentName:"p"},"HeaderGlobalAction")," component inside of the\n",(0,r.kt)("inlineCode",{parentName:"p"},"HeaderGlobalBar")," where we will add our icons. These represent actions in the\nheader a user can make. Replace:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:"path=src/components/TutorialHeader/TutorialHeader.js",path:"src/components/TutorialHeader/TutorialHeader.js"},"<HeaderGlobalBar />\n")),(0,r.kt)("p",null,"With:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"path=src/components/TutorialHeader/TutorialHeader.js",path:"src/components/TutorialHeader/TutorialHeader.js"},'<HeaderGlobalBar>\n  <HeaderGlobalAction aria-label="Notifications" tooltipAlignment="center">\n    <Notification size={20} />\n  </HeaderGlobalAction>\n  <HeaderGlobalAction aria-label="User Avatar" tooltipAlignment="center">\n    <UserAvatar size={20} />\n  </HeaderGlobalAction>\n  <HeaderGlobalAction aria-label="App Switcher" tooltipAlignment="end">\n    <Switcher size={20} />\n  </HeaderGlobalAction>\n</HeaderGlobalBar>\n')),(0,r.kt)("h3",null,"Render the header"),(0,r.kt)("p",null,"Next we’ll render our UI Shell by importing our ",(0,r.kt)("inlineCode",{parentName:"p"},"TutorialHeader")," component and\n",(0,r.kt)("inlineCode",{parentName:"p"},"Content")," into ",(0,r.kt)("inlineCode",{parentName:"p"},"App.js"),". Your imports should look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"path=src/App.js",path:"src/App.js"},"import React, { Component } from 'react';\nimport './app.scss';\nimport { Button, Content } from '@carbon/react';\nimport TutorialHeader from './components/TutorialHeader';\n")),(0,r.kt)("p",null,"Our ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," currently just contains a ",(0,r.kt)("inlineCode",{parentName:"p"},"Button"),". Let’s update that to include\nour imported components. This should look like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"path=src/App.js",path:"src/App.js"},"class App extends Component {\n  render() {\n    return (\n      <>\n        <TutorialHeader />\n        <Content>\n          <Button>Button</Button>\n        </Content>\n      </>\n    );\n  }\n}\n")),(0,r.kt)("p",null,"You should now see a styled UI Shell header and a button below it."),(0,r.kt)("h2",null,"Create pages"),(0,r.kt)("p",null,"Next thing we need to do is create the files for our content. Start by creating\na folder called ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"src"),". This should be a sibling of\n",(0,r.kt)("inlineCode",{parentName:"p"},"src/components"),"."),(0,r.kt)("p",null,"Since our app will have two pages, we’ll create two folders in ",(0,r.kt)("inlineCode",{parentName:"p"},"src/content"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"src/content\n├── LandingPage\n└── RepoPage\n")),(0,r.kt)("p",null,"Next, we’ll set up these folders the same way we set up\n",(0,r.kt)("inlineCode",{parentName:"p"},"src/components/TutorialHeader"),"."),(0,r.kt)("p",null,"Create the following files in the ",(0,r.kt)("inlineCode",{parentName:"p"},"LandingPage")," folder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"src/content/LandingPage\n├── _landing-page.scss\n├── index.js\n└── LandingPage.js\n")),(0,r.kt)("p",null,"Create the following files in the ",(0,r.kt)("inlineCode",{parentName:"p"},"RepoPage")," folder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"src/content/RepoPage\n├── _repo-page.scss\n├── index.js\n└── RepoPage.js\n")),(0,r.kt)("h3",null,"Set up content Sass"),(0,r.kt)("p",null,"Next, we’ll import our content Sass files in ",(0,r.kt)("inlineCode",{parentName:"p"},"app.scss"),", like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scss",metastring:"path=src/app.scss",path:"src/app.scss"},"@use './components/TutorialHeader/tutorial-header';\n@use './content/LandingPage/landing-page';\n@use './content/RepoPage/repo-page';\n")),(0,r.kt)("h3",null,"Import and export content pages"),(0,r.kt)("p",null,"Now that our stylesheets are set up, we need to create our pages’ components.\nStarting with ",(0,r.kt)("inlineCode",{parentName:"p"},"LandingPage"),", just like with our header, we need to export the\ncomponent in ",(0,r.kt)("inlineCode",{parentName:"p"},"src/content/LandingPage/index.js")," by adding:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"path=src/content/LandingPage/index.js",path:"src/content/LandingPage/index.js"},"import LandingPage from './LandingPage';\nexport default LandingPage;\n")),(0,r.kt)("p",null,"Next in ",(0,r.kt)("inlineCode",{parentName:"p"},"LandingPage.js"),", we’ll create our component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"path=src/content/LandingPage/LandingPage.js",path:"src/content/LandingPage/LandingPage.js"},"import React from 'react';\n\nconst LandingPage = () => {\n  return <div>LANDING PAGE</div>;\n};\n\nexport default LandingPage;\n")),(0,r.kt)("p",null,"We’ll repeat this process with ",(0,r.kt)("inlineCode",{parentName:"p"},"RepoPage"),"."),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"src/content/RepoPage/index.js"),", import and export the ",(0,r.kt)("inlineCode",{parentName:"p"},"RepoPage")," component\nlike so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"path=src/content/RepoPage/index.js",path:"src/content/RepoPage/index.js"},"import RepoPage from './RepoPage';\nexport default RepoPage;\n")),(0,r.kt)("p",null,"Then in ",(0,r.kt)("inlineCode",{parentName:"p"},"RepoPage.js")," create the component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"path=src/content/RepoPage/RepoPage.js",path:"src/content/RepoPage/RepoPage.js"},"import React from 'react';\n\nconst RepoPage = () => {\n  return <div>REPO PAGE</div>;\n};\n\nexport default RepoPage;\n")),(0,r.kt)("p",null,"Awesome! We’ve just created our content pages. Next thing we need to do is\nrender them with our router."),(0,r.kt)("h2",null,"Add routing"),(0,r.kt)("p",null,"We’ve updated our app to render our header, but now we need to add routing\nfunctionality. To do this we need to install ",(0,r.kt)("inlineCode",{parentName:"p"},"react-router-dom"),". Go ahead and\nstop your development server (with ",(0,r.kt)("inlineCode",{parentName:"p"},"CTRL-C"),") and then:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add react-router-dom@5.0.0\nyarn start\n")),(0,r.kt)("p",null,"First, we need to wrap our app in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Router")," component. In the root\n",(0,r.kt)("inlineCode",{parentName:"p"},"index.js"),", add the import:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"path=src/index.js",path:"src/index.js"},"import { HashRouter as Router } from 'react-router-dom';\n")),(0,r.kt)(m,{mdxType:"InlineNotification"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," We’re using ",(0,r.kt)("inlineCode",{parentName:"p"},"HashRouter")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"BrowserRouter")," to simplify\ndeployments in upcoming tutorial steps. Learn more about the React Router\n",(0,r.kt)("a",{parentName:"p",href:"https://reacttraining.com/react-router/web/api/BrowserRouter"},"here"),".")),(0,r.kt)("p",null,"Then, update the ",(0,r.kt)("inlineCode",{parentName:"p"},"render()")," function to include the ",(0,r.kt)("inlineCode",{parentName:"p"},"Router"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"path=src/index.js",path:"src/index.js"},"ReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n")),(0,r.kt)("p",null,"In order to render our content pages, we need to add the following imports in\n",(0,r.kt)("inlineCode",{parentName:"p"},"App.js")," below our existing imports."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"path=src/App.js",path:"src/App.js"},"import { Route, Switch } from 'react-router-dom';\nimport LandingPage from './content/LandingPage';\nimport RepoPage from './content/RepoPage';\n")),(0,r.kt)("p",null,"This allows us to use our page content components and routing components from\n",(0,r.kt)("inlineCode",{parentName:"p"},"react-router-dom"),"."),(0,r.kt)("p",null,"The next thing we need to do is update what we’re returning to ",(0,r.kt)("inlineCode",{parentName:"p"},"App.js"),". We\ncurrently just have a button in our content. In order to render our pages\ncorrectly, we need to delete the ",(0,r.kt)("inlineCode",{parentName:"p"},"Button")," component within ",(0,r.kt)("inlineCode",{parentName:"p"},"Content")," (and remove\nthe Button import)."),(0,r.kt)("p",null,"Now inside ",(0,r.kt)("inlineCode",{parentName:"p"},"Content")," we’ll add the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"path=src/App.js",path:"src/App.js"},'<Switch>\n  <Route exact path="/" component={LandingPage} />\n  <Route path="/repos" component={RepoPage} />\n</Switch>\n')),(0,r.kt)("p",null,"After that we need to do a couple quick fixes to the UI Shell to have it work\nwith the React router."),(0,r.kt)("p",null,"Add the ",(0,r.kt)("inlineCode",{parentName:"p"},"Link")," import in ",(0,r.kt)("inlineCode",{parentName:"p"},"TutorialHeader.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"path=src/components/TutorialHeader/TutorialHeader.js",path:"src/components/TutorialHeader/TutorialHeader.js"},"import { Link } from 'react-router-dom';\n")),(0,r.kt)("p",null,"We need to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Link")," component instead of the default anchor elements to\nprevent full page reload when navigating to different pages with React Router.\nTo use ",(0,r.kt)("inlineCode",{parentName:"p"},"Link"),", update the ",(0,r.kt)("inlineCode",{parentName:"p"},"HeaderName")," component to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"element")," prop and\nreplace the ",(0,r.kt)("inlineCode",{parentName:"p"},"href")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"to"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"path=src/components/TutorialHeader/TutorialHeader.js",path:"src/components/TutorialHeader/TutorialHeader.js"},'<HeaderName element={Link} to="/" prefix="IBM">\n  Carbon Tutorial\n</HeaderName>\n')),(0,r.kt)("p",null,"Do the same with the components that contain ",(0,r.kt)("inlineCode",{parentName:"p"},'href="/repos"'),", updating them to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"path=src/components/TutorialHeader/TutorialHeader.js",path:"src/components/TutorialHeader/TutorialHeader.js"},'<HeaderMenuItem element={Link} to="/repos">\n  Repositories\n</HeaderMenuItem>\n')),(0,r.kt)("p",null,"You should now have a working header that routes to different pages without full\npage reload! However, our page does not match the design specs. We need to\nchange the header theme to ",(0,r.kt)("inlineCode",{parentName:"p"},"g100")," to match the specs."),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"App.js")," we will add inline theming for our navigation. First, we need to\nimport our new ",(0,r.kt)("inlineCode",{parentName:"p"},"Theme")," component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"path=src/App.js",path:"src/App.js"},"import { Content, Theme } from '@carbon/react';\n")),(0,r.kt)("p",null,"Then, we will wrap ",(0,r.kt)("inlineCode",{parentName:"p"},"Theme")," around our header, and set the zoned theme using the\n",(0,r.kt)("inlineCode",{parentName:"p"},"theme")," prop, which accepts one of four strings: ",(0,r.kt)("inlineCode",{parentName:"p"},'"white"'),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"g10"'),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"g90"')," or\n",(0,r.kt)("inlineCode",{parentName:"p"},'"g100"'),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"path=src/App.js",path:"src/App.js"},'<>\n  <Theme theme="g100">\n    <TutorialHeader />\n  </Theme>\n  <Content>\n    <Switch>\n      <Route exact path="/" component={LandingPage} />\n      <Route path="/repos" component={RepoPage} />\n    </Switch>\n  </Content>\n</>\n')),(0,r.kt)("p",null,"You might have noticed that the landing and repo page content disappeared. This\nis because we now have a wrapper around the UI Shell, and the spacing is off. To\nfix this, we’ll add the following override in ",(0,r.kt)("inlineCode",{parentName:"p"},"index.scss")," below our style\nimport:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scss",metastring:"path=src/index.scss",path:"src/index.scss"},".cds--content {\n  margin-top: 3rem;\n}\n")),(0,r.kt)("p",null,"We have one last thing to fix before we’re done. Because we changed the header\ntheme to dark, the ",(0,r.kt)("inlineCode",{parentName:"p"},"<HeaderGlobalAction>")," tooltips are now light instead of\ndark, and when you scroll the page, it blends into the content. To fix this,\nwe’ll add some overriding styles in ",(0,r.kt)("inlineCode",{parentName:"p"},"_tutorial-header.scss"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scss",metastring:"path=src/components/TutorialHeader/_tutorial-header.scss",path:"src/components/TutorialHeader/_tutorial-header.scss"},"@use '@carbon/react/scss/colors';\n\n// overriding header tooltip bg color\n// because the navigation is dark themed while the content is white\n// which means the dark theme tooltip bg blends into the white content bg\n.cds--header__global .cds--popover-content {\n  background-color: colors.$gray-20;\n}\n\n.cds--header__global .cds--popover-caret {\n  background-color: colors.$gray-20;\n}\n")),(0,r.kt)("h2",null,"Submit pull request"),(0,r.kt)("p",null,"We’re going to submit a pull request to verify completion of this tutorial step\nand demonstrate a couple of related concepts."),(0,r.kt)("h3",null,"Continuous integration (CI) check"),(0,r.kt)("p",null,"We have a ",(0,r.kt)("inlineCode",{parentName:"p"},"ci-check")," script defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," that verifies file\nformatting for files that have been touched since the last Git commit with a\ntool called ",(0,r.kt)("a",{parentName:"p",href:"https://prettier.io"},"Prettier"),". You’d typically also have that\nscript run your test suite as part of your CI build. Go ahead and make sure\neverything looks good with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn ci-check\n")),(0,r.kt)(m,{mdxType:"InlineNotification"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," If the ",(0,r.kt)("inlineCode",{parentName:"p"},"ci-check")," is giving an error, it’s likely that some of your\nsource files are not properly formatted. This could happen if your text editor\nisn’t formatting with Prettier on save. To get ",(0,r.kt)("inlineCode",{parentName:"p"},"ci-check")," to pass, run\n",(0,r.kt)("inlineCode",{parentName:"p"},"yarn format")," then re-run ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn ci-check"),".")),(0,r.kt)("h3",null,"Git commit and push"),(0,r.kt)("p",null,"Before we can create a pull request, stage and commit all of your changes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git add --all && git commit -m "feat(tutorial): complete step 1"\n')),(0,r.kt)(m,{mdxType:"InlineNotification"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," You’ll notice that your commit includes binaries in the ",(0,r.kt)("inlineCode",{parentName:"p"},".yarn/cache"),"\nfolder. That’s expected as the repository is configured to run\n",(0,r.kt)("a",{parentName:"p",href:"https://yarnpkg.com/blog/2016/11/24/offline-mirror"},"Yarn offline")," for more\nreliable builds. Future tutorial steps that don’t install new packages won’t\nhave ",(0,r.kt)("inlineCode",{parentName:"p"},".yarn/cache")," commit changes.")),(0,r.kt)("p",null,"Then, push to your repository:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git push origin v11-react-step-1\n")),(0,r.kt)(m,{mdxType:"InlineNotification"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," If your Git remote protocol is HTTPS instead of SSH, you may be\nprompted to authenticate with GitHub when you push changes. If your GitHub\naccount has two-factor authentication enabled, we recommend that you follow\nthese instructions to\n",(0,r.kt)("a",{parentName:"p",href:"https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line"},"create a personal access token for the command line"),".\nThat lets you use your token instead of password when performing Git operations\nover HTTPS.")),(0,r.kt)(m,{mdxType:"InlineNotification"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," If you receive a ",(0,r.kt)("inlineCode",{parentName:"p"},"non-fast-forward")," error, it’s likely that your\nforked repository is behind the original repository and needs to be updated.\nThis can happen if the tutorial was updated after you began working on it. To\nfix, run ",(0,r.kt)("inlineCode",{parentName:"p"},"git pull upstream v11-react-step-1")," to merge the changes into your\nbranch, then you can try pushing again. Or, you can\n",(0,r.kt)("a",{parentName:"p",href:"https://help.github.com/en/articles/syncing-a-fork"},"manually merge")," in the\nupstream changes.")),(0,r.kt)("h3",null,"Pull request (PR)"),(0,r.kt)("p",null,"Finally, visit\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/carbon-design-system/carbon-tutorial"},"carbon-tutorial")," to\n“Compare & pull request”. In doing so, make sure that you are comparing to\n",(0,r.kt)("inlineCode",{parentName:"p"},"v11-react-step-1")," into ",(0,r.kt)("inlineCode",{parentName:"p"},"base: v11-react-step-1"),". Take notice of the\n",(0,r.kt)("a",{parentName:"p",href:"https://www.netlify.com"},"Netlify")," bot that deploys a preview of your PR every\ntime that you push new commits. These previews can be shared and viewed by\nanybody to assist the PR review process."),(0,r.kt)(m,{mdxType:"InlineNotification"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," Expect your tutorial step PRs to be reviewed by the Carbon team but\nnot merged. We’ll close your PR so we can keep the repository’s remote branches\npristine and ready for the next person!")),(0,r.kt)(m,{mdxType:"InlineNotification"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," If your PR fails the CircleCI test with the error\n",(0,r.kt)("inlineCode",{parentName:"p"},"Can't make a request in offline mode"),", try running the following command:\n",(0,r.kt)("inlineCode",{parentName:"p"},"rm -rf .yarn-offline-mirror node_modules && yarn cache clean && yarn install"),".\nAdd and commit the changes once this completes, and try pushing again.")))}g.isMDXComponent=!0}}]);