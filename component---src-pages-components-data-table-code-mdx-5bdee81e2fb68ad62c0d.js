"use strict";(self.webpackChunkcarbondesignsystem=self.webpackChunkcarbondesignsystem||[]).push([[74593],{60669:function(e,n,a){var t;a.r(n),a.d(n,{_frontmatter:function(){return m},default:function(){return A}});var o=a(45987),l=a(67294),r=a(3905),s=a(3624),c=a(90890),d=a(42522),b=a(50601),p=a(12327);const i=["components"],m={},h=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)},T=h("PageDescription"),u=h("Row"),g=h("Column"),w=h("ResourceCard"),y=h("MdxIcon"),k=h("ComponentDemo"),C=h("ComponentVariant"),R={_frontmatter:m},x=s.Z;function A(e){let{components:n}=e,s=(0,o.Z)(e,i);return(0,r.kt)(x,Object.assign({},R,s,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(T,{mdxType:"PageDescription"},(0,r.kt)("p",null,"Preview the data table component with the React live demo. For detailed code\nusage documentation, see the Storybooks for each framework below.")),(0,r.kt)("h2",null,"Documentation"),(0,r.kt)(u,{className:"resource-card-group",mdxType:"Row"},(0,r.kt)(g,{colLg:4,colMd:4,noGutterSm:!0,mdxType:"Column"},(0,r.kt)(w,{subTitle:"React",href:"https://react.carbondesignsystem.com/?path=/story/components-datatable-basic--default",mdxType:"ResourceCard"},(0,r.kt)(y,{name:"react",mdxType:"MdxIcon"}))),(0,r.kt)(g,{colLg:4,colMd:4,noGutterSm:!0,mdxType:"Column"},(0,r.kt)(w,{subTitle:"Web Components",href:"https://web-components.carbondesignsystem.com/?path=/story/components-datatable-basic--default",mdxType:"ResourceCard"},(0,r.kt)(y,{name:"webcomponents",mdxType:"MdxIcon"}))),(0,r.kt)(g,{colLg:4,colMd:4,noGutterSm:!0,mdxType:"Column"},(0,r.kt)(w,{subTitle:"Angular (Community)",href:"https://angular.carbondesignsystem.com/?path=/story/components-data-table--basic",mdxType:"ResourceCard"},(0,r.kt)(y,{name:"angular",mdxType:"MdxIcon"}))),(0,r.kt)(g,{colLg:4,colMd:4,noGutterSm:!0,mdxType:"Column"},(0,r.kt)(w,{subTitle:"Vue (Community)",href:"http://vue.carbondesignsystem.com/?path=/story/components-cvdatatable--minimal",mdxType:"ResourceCard"},(0,r.kt)(y,{name:"vue",mdxType:"MdxIcon"})))),(0,r.kt)("h2",null,"Live demo"),(0,r.kt)(k,{components:[{id:"default-table",label:"Default"},{id:"with-selection",label:"With selection"},{id:"with-expansion",label:"With expansion"},{id:"with-batch-actions",label:"With batch actions"}],scope:{rowData:c.p,headerData:c.h,React:t||(t=a.t(l,2)),TrashCan:d.ZN,Save:b.vc,Download:p.UW},mdxType:"ComponentDemo"},(0,r.kt)(C,{id:"default-table",knobs:{DataTable:["isSortable"],Table:["size","useZebraStyles"]},links:{React:"https://react.carbondesignsystem.com/?path=/story/components-datatable--default","Web Components":"https://web-components.carbondesignsystem.com/?path=/story/components-datatable-basic--default",Angular:"https://angular.carbondesignsystem.com/?path=/story/components-table--basic",Vue:"http://vue.carbondesignsystem.com/?path=/story/components-cvdatatable--minimal"},mdxType:"ComponentVariant"},'<DataTable rows={rowData} headers={headerData}>\n  {({ rows, headers, getHeaderProps, getTableProps }) => (\n    <TableContainer title="DataTable">\n      <Table {...getTableProps()}>\n        <TableHead>\n          <TableRow>\n            {headers.map((header) => (\n              <TableHeader {...getHeaderProps({ header })}>\n                {header.header}\n              </TableHeader>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow key={row.id}>\n              {row.cells.map((cell) => (\n                <TableCell key={cell.id}>{cell.value}</TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )}\n</DataTable>'),(0,r.kt)(C,{id:"with-selection",knobs:{DataTable:["isSortable"],Table:["size","useZebraStyles"]},links:{React:"https://react.carbondesignsystem.com/?path=/story/components-datatable-selection--default","Web Components":"https://web-components.carbondesignsystem.com/?path=/story/components-datatable-selection--default",Angular:"https://angular.carbondesignsystem.com/?path=/story/components-table--basic",Vue:"http://vue.carbondesignsystem.com/?path=/story/components-cvdatatable--default"},mdxType:"ComponentVariant"},'<DataTable rows={rowData} headers={headerData}>\n  {({\n    rows,\n    headers,\n    getHeaderProps,\n    getSelectionProps,\n    getRowProps,\n    getTableProps,\n  }) => (\n    <TableContainer title="DataTable with selection">\n      <Table {...getTableProps()}>\n        <TableHead>\n          <TableRow>\n            <TableSelectAll {...getSelectionProps()} />\n            {headers.map((header) => (\n              <TableHeader {...getHeaderProps({ header })}>\n                {header.header}\n              </TableHeader>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow {...getRowProps({ row })}>\n              <TableSelectRow {...getSelectionProps({ row })} />\n              {row.cells.map((cell) => (\n                <TableCell key={cell.id}>{cell.value}</TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )}\n</DataTable>'),(0,r.kt)(C,{id:"with-expansion",knobs:{DataTable:["isSortable"]},links:{React:"https://react.carbondesignsystem.com/?path=/story/components-datatable-expansion--default","Web Components":"https://web-components.carbondesignsystem.com/?path=/story/components-datatable-expansion--default",Angular:"https://angular.carbondesignsystem.com/?path=/story/components-table--with-expansion",Vue:"http://vue.carbondesignsystem.com/?path=/story/components-cvdatatable--slotted-expanding-data"},mdxType:"ComponentVariant"},'<DataTable\n  rows={rowData}\n  headers={headerData}>\n    {({ rows, headers, getHeaderProps, getRowProps, getTableProps }) => (\n      <TableContainer title="DataTable with expansion">\n        <Table {...getTableProps()}>\n          <TableHead>\n            <TableRow>\n              <TableExpandHeader />\n              {headers.map(header => (\n                <TableHeader {...getHeaderProps({ header })}>\n                  {header.header}\n                </TableHeader>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map(row => (\n              <React.Fragment key={row.id}>\n                <TableExpandRow {...getRowProps({ row })}>\n                  {row.cells.map(cell => (\n                    <TableCell key={cell.id}>{cell.value}</TableCell>\n                  ))}\n                </TableExpandRow>\n                {row.isExpanded && (\n                  <TableExpandedRow colSpan={headers.length + 1}>\n                    <p>Aux squad rules</p>\n                  </TableExpandedRow>\n                )}\n              </React.Fragment>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )}\n  </DataTable>'),(0,r.kt)(C,{id:"with-batch-actions",links:{React:"https://react.carbondesignsystem.com/?path=/story/components-datatable-batch-actions--default","Web Components":"https://web-components.carbondesignsystem.com/?path=/story/components-datatable-batch-actions--default",Angular:"https://angular.carbondesignsystem.com/?path=/story/components-table--with-toolbar",Vue:"http://vue.carbondesignsystem.com/?path=/story/components-cvdatatable--default"},mdxType:"ComponentVariant"},"<DataTable rows={rowData} headers={headerData}>\n  {({\n    rows,\n    headers,\n    getHeaderProps,\n    getRowProps,\n    getSelectionProps,\n    getBatchActionProps,\n    onInputChange,\n    selectedRows,\n  }) => (\n    <TableContainer title=\"DataTable with batch actions\">\n      <TableToolbar>\n        <TableBatchActions {...getBatchActionProps()}>\n          <TableBatchAction\n            tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n            renderIcon={TrashCan}\n            onClick={() => console.log('clicked')}\n          >\n            Delete\n          </TableBatchAction>\n          <TableBatchAction\n            tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n            renderIcon={Save}\n            onClick={() => console.log('clicked')}\n          >\n            Save\n          </TableBatchAction>\n          <TableBatchAction\n            tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n            renderIcon={Download}\n            onClick={() => console.log('clicked')}\n          >\n            Download\n          </TableBatchAction>\n        </TableBatchActions>\n        <TableToolbarContent>\n          <TableToolbarSearch\n            tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}\n            onChange={onInputChange}\n          />\n          <TableToolbarMenu\n            tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}\n          >\n            <TableToolbarAction primaryFocus onClick={() => alert('Alert 1')}>\n              Action 1\n            </TableToolbarAction>\n            <TableToolbarAction onClick={() => alert('Alert 2')}>\n              Action 2\n            </TableToolbarAction>\n            <TableToolbarAction onClick={() => alert('Alert 3')}>\n              Action 3\n            </TableToolbarAction>\n          </TableToolbarMenu>\n          <Button\n            tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}\n            onClick={() => console.log('clicked')}\n            size=\"small\"\n            kind=\"primary\"\n          >\n            Add new\n          </Button>\n        </TableToolbarContent>\n      </TableToolbar>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableSelectAll {...getSelectionProps()} />\n            {headers.map((header) => (\n              <TableHeader {...getHeaderProps({ header })}>\n                {header.header}\n              </TableHeader>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow {...getRowProps({ row })}>\n              <TableSelectRow {...getSelectionProps({ row })} />\n              {row.cells.map((cell) => (\n                <TableCell key={cell.id}>{cell.value}</TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )}\n</DataTable>")),(0,r.kt)("h2",null,"Sample data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const headerData = [\n  {\n    header: 'Name',\n    key: 'name',\n  },\n  {\n    header: 'Protocol',\n    key: 'protocol',\n  },\n  {\n    header: 'Port',\n    key: 'port',\n  },\n  {\n    header: 'Rule',\n    key: 'rule',\n  },\n  {\n    header: 'Attached Groups',\n    key: 'attached_groups',\n  },\n  {\n    header: 'Status',\n    key: 'status',\n  },\n];\n\nconst rowData = [\n  {\n    attached_groups: 'Kevins VM Groups',\n    id: 'a',\n    name: 'Load Balancer 3',\n    port: 3000,\n    protocol: 'HTTP',\n    rule: 'Round robin',\n    status: 'Disabled',\n  },\n  {\n    attached_groups: 'Maureens VM Groups',\n    id: 'b',\n    name: 'Load Balancer 1',\n    port: 443,\n    protocol: 'HTTP',\n    rule: 'Round robin',\n    status: 'Starting',\n  },\n  {\n    attached_groups: 'Andrews VM Groups',\n    id: 'c',\n    name: 'Load Balancer 2',\n    port: 80,\n    protocol: 'HTTP',\n    rule: 'DNS delegation',\n    status: 'Active',\n  },\n  {\n    attached_groups: 'Marcs VM Groups',\n    id: 'd',\n    name: 'Load Balancer 6',\n    port: 3000,\n    protocol: 'HTTP',\n    rule: 'Round robin',\n    status: 'Disabled',\n  },\n  {\n    attached_groups: 'Mels VM Groups',\n    id: 'e',\n    name: 'Load Balancer 4',\n    port: 443,\n    protocol: 'HTTP',\n    rule: 'Round robin',\n    status: 'Starting',\n  },\n  {\n    attached_groups: 'Ronjas VM Groups',\n    id: 'f',\n    name: 'Load Balancer 5',\n    port: 80,\n    protocol: 'HTTP',\n    rule: 'DNS delegation',\n    status: 'Active',\n  },\n];\n")))}A.isMDXComponent=!0}}]);