{
    "componentChunkName": "component---src-pages-components-tile-usage-mdx",
    "path": "/components/tile/usage/",
    "result": {"pageContext":{"frontmatter":{"title":"Tile","description":"Tiles are a flexible component for displaying a wide variety of content, including informational, getting started, how-to, next steps, and more.","tabs":["Usage","Style","Code","Accessibility"]},"relativePagePath":"/components/tile/usage.mdx","titleType":"prepend","MdxNode":{"id":"4e49fdea-cb37-5794-a191-c0d3f29f34eb","children":[],"parent":"4ba13607-274a-5297-8b34-2c56cc7274e8","internal":{"content":"---\ntitle: Tile\ndescription:\n  Tiles are a flexible component for displaying a wide variety of content,\n  including informational, getting started, how-to, next steps, and more.\ntabs: ['Usage', 'Style', 'Code', 'Accessibility']\n---\n\n<PageDescription>\n\nTiles are a highly flexible component for displaying a wide variety of content,\nincluding information, getting started, how-to, next steps, and more.\n\n</PageDescription>\n\n<InlineNotification>\n\nTile guidance has been recently updated but is not yet applicable for all\nimplementations. Please continue following the guidance and we'll work on fixing\nthe issues.\n\n</InlineNotification>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Live demo</AnchorLink>\n<AnchorLink>Tile variants</AnchorLink>\n<AnchorLink>Formatting</AnchorLink>\n<AnchorLink>Behaviors</AnchorLink>\n<AnchorLink>Related</AnchorLink>\n<AnchorLink>References</AnchorLink>\n<AnchorLink>Feedback</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nCarbon ships a basic tile structure that responds to the grid. Based on the\nlayout structure, tiles can contain type, images and/or a block of color. As\ntiles have no pre-set styles for the content within them, the tile component\nusage guidance is purposefully high-level. It focuses specifically on the tile\nitself, not the structure of the information or interactive elements that the\ntile contains—that type of information will be found in the card pattern.\n\n#### Tiles versus Cards\n\nTiles are simple and foundational. Cards can be very complex. They are built\nupon the tile foundation and have various patterns, multiple actions, overflow\nmenus, selectable features, etc. Carbon does not have a Card pattern yet, but we\nlink out to several card patterns within our pattern asset library (PAL)\necosystem below:\n\n- [Productive vs. Expressive cards](https://pages.github.ibm.com/cdai-design/pal/components/card/overview/)\n  (Carbon for Cloud & Cognitive)\n- [Dashboard cards](https://pages.github.ibm.com/ai-applications/design/patterns/dashboards-v2/overview/#dashboard-cards)\n  (AI Applications Design)\n- [Card](https://www.ibm.com/standards/carbon/components/card) (Carbon for\n  IBM.com)\n\n### When to use\n\nTiles are reusable components that provide shortcuts to building cards and other\nmodules. Here are some common use cases for when to use tiles:\n\n- To contain related groupings of information or actions\n- To guide users to take actions or navigate\n- To present options for single or multiple selections\n- To hide or show large amounts of content\n\n## Live demo\n\n<ComponentDemo\n  components={[\n    {\n      id: 'tile',\n      label: 'Default tile',\n    },\n    {\n      id: 'clickable-tile',\n      label: 'Clickable tile',\n    },\n    {\n      id: 'radio-tile',\n      label: 'Radio tile',\n    },\n    {\n      id: 'selectable-tile',\n      label: 'Selectable tile',\n    },\n    {\n      id: 'expandable-tile',\n      label: 'Expandable tile',\n    },\n  ]}\n>\n  <ComponentVariant\n    id=\"tile\"\n    knobs={{\n      Tile: ['light'],\n    }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/components-tile--default',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-tiles--basic',\n      Vue: 'http://vue.carbondesignsystem.com/?path=/story/components-cvtile--default',\n      'Web Components':\n        'https://web-components.carbondesignsystem.com/?path=/story/components-tile--default',\n    }}\n  >\n    {`\n    <Tile>\n      Default tile\n    </Tile>\n  `}\n  </ComponentVariant>\n  <ComponentVariant\n    id=\"clickable-tile\"\n    knobs={{\n      ClickableTile: ['light', 'clicked'],\n    }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/components-tile--clickable',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-tiles--basic',\n      Vue: 'http://vue.carbondesignsystem.com/?path=/story/components-cvtile--default',\n      'Web Components':\n        'https://web-components.carbondesignsystem.com/?path=/story/components-tile--clickable',\n    }}\n  >\n    {`\n    <ClickableTile\n      href=\"#\"\n    >\n      Clickable tile\n    </ClickableTile>\n  `}\n  </ComponentVariant>\n  <ComponentVariant\n    id=\"radio-tile\"\n    knobs={{\n      RadioTile: ['light'],\n    }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/components-tile--radio',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-tiles--clickable',\n      Vue: 'http://vue.carbondesignsystem.com/?path=/story/components-cvtile--clickable',\n      'Web Components':\n        'https://web-components.carbondesignsystem.com/?path=/story/components-tile--single-selectable',\n    }}\n  >\n    {`\n    <TileGroup\n      defaultSelected=\"default-selected\"\n      legend=\"Radio tile group\"\n      name=\"tile-group\"\n    >\n      <RadioTile\n        id=\"tile-1\"\n        name=\"tiles\"\n        tabIndex={0}\n        value=\"standard\"\n      >\n        Radio tile\n      </RadioTile>\n      <RadioTile\n        id=\"tile-2\"\n        name=\"tiles\"\n        tabIndex={0}\n        value=\"default-selected\"\n      >\n        Radio tile\n      </RadioTile>\n      <RadioTile\n        id=\"tile-3\"\n        name=\"tiles\"\n        tabIndex={0}\n        value=\"selected\"\n      >\n        Radio tile\n      </RadioTile>\n    </TileGroup>\n  `}\n  </ComponentVariant>\n  <ComponentVariant\n    id=\"selectable-tile\"\n    knobs={{\n      SelectableTile: ['light', 'selected'],\n    }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/components-tile--multi-select',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-tiles--selectable',\n      Vue: 'http://vue.carbondesignsystem.com/?path=/story/components-cvtile--selectable',\n      'Web Components':\n        'https://web-components.carbondesignsystem.com/?path=/story/components-tile--single-selectable',\n    }}\n  >\n    {`\n    <div\n      aria-label=\"selectable tiles\"\n      role=\"group\"\n    >\n      <SelectableTile\n        id=\"tile-1\"\n        name=\"tiles\"\n        tabIndex={0}\n        title=\"title\"\n        value=\"value\"\n      >\n        Multiselect tile\n      </SelectableTile>\n      <SelectableTile\n        id=\"tile-2\"\n        name=\"tiles\"\n        tabIndex={0}\n        title=\"title\"\n        value=\"value\"\n      >\n        Multiselect tile\n      </SelectableTile>\n      <SelectableTile\n        id=\"tile-3\"\n        name=\"tiles\"\n        tabIndex={0}\n        title=\"title\"\n        value=\"value\"\n      >\n        Multiselect tile\n      </SelectableTile>\n    </div>\n  `}\n  </ComponentVariant>\n  <ComponentVariant\n    id=\"expandable-tile\"\n    knobs={{\n      ExpandableTile: ['light', 'expanded'],\n    }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/components-tile--expandable',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-tiles--expandable',\n      Vue: 'http://vue.carbondesignsystem.com/?path=/story/components-cvtile--expandable',\n      'Web Components':\n        'https://web-components.carbondesignsystem.com/?path=/story/components-tile--expandable',\n    }}\n  >\n    {`\n    <ExpandableTile\n      tabIndex={0}\n      tileCollapsedIconText=\"Interact to Expand tile\"\n      tileExpandedIconText=\"Interact to Collapse tile\"\n      tileMaxHeight={0}\n      tilePadding={0}\n    >\n      <TileAboveTheFoldContent>\n        <div style={{ height: '64px'}}>\n          Above the fold content here\n        </div>\n      </TileAboveTheFoldContent>\n      <TileBelowTheFoldContent>\n        <div style={{ height: '64px'}}>\n          Below the fold content here\n        </div>\n      </TileBelowTheFoldContent>\n    </ExpandableTile>\n  `}\n  </ComponentVariant>\n</ComponentDemo>\n\n## Tile variants\n\nTiles can function or be implemented in four ways—base, clickable, selectable,\nor expandable. These variations of tiles are flexible enough to support a\nvariety of different use cases when building more complicating card features.\n\n| Variant                   | Purpose                                                                                                  |\n| ------------------------- | -------------------------------------------------------------------------------------------------------- |\n| [Base](#base)             | For high-level, short, and digestible content pieces such as features, plans, or services offered        |\n| [Clickable](#clickable)   | For prompting an action, navigating or directing to other pieces of information about the subject matter |\n| [Selectable](#selectable) | For presenting options to a user in a structured manner, such as a set of pricing plans                  |\n| [Expandable](#expandable) | For hiding and revealing a large amount of content in order to focus on specific pieces of info          |\n\n### Base\n\nBase tiles are used to display information to the user, such as features or\nservices offered. Base tiles are often seen on marketing pages to promote\ncontent or on dashboards that are highly interactive. These tiles can have\ninternal calls-to-action (CTAs), such as a [button](/components/button/usage) or\na [link](/components/link/usage).\n\n<Row>\n<Column colLg={12}>\n\n![Example image of base tiles.](images/tile-usage-1.png)\n\n</Column>\n</Row>\n\n### Clickable\n\nClickable tiles can be used as navigational items, where the entire tile is a\nclickable state, which redirects the user to a new page. Clickable tiles cannot\ncontain separate internal CTAs but can contain pictograms, icons, or media such\nas illustrations or images.\n\n<Row>\n<Column colLg={12}>\n\n![Example image of clickable tiles](images/tile-usage-2.png)\n\n</Column>\n</Row>\n\n### Selectable\n\nSelectable tiles work well for presenting options to a user in a structured\nmanner, such as a set of pricing plans. Selectable tiles may contain internal\nCTAs (like links to docs) if the internal CTA is given its own click target.\n\nSelectable tiles can either have a single select state working like a\n[radio button](/components/radio-button/usage), or multi-select state working as\na [checkbox](/components/checkbox/usage).\n\n<Row>\n<Column colLg={8}>\n\n![Selectable radio-button / single select tiles](images/tile-usage-3.png)\n\n<Caption>Single select tiles work like radio-buttons</Caption>\n\n![Selectable checkbox / multi-select tiles](images/tile-usage-4.png)\n\n<Caption>Multi-select tiles work like checkboxes </Caption>\n\n</Column>\n</Row>\n\n### Expandable\n\nExpandable tiles are helpful for hiding and showing large amounts of content to\na user. When expanded, tiles push content down the page. They allow the user to\nspecifically focus on featured content while having access to the rest of the\ninformation. Expandable tiles can contain internal CTAs (like links to docs) if\nthey are given their own click targets and the click target is reduced to only\nthe chevron icon.\n\n<Row>\n<Column colLg={8}>\n\n![Example image of expandable tiles/ single select tiles](images/tile-usage-5.gif)\n\n</Column>\n</Row>\n\n## Formatting\n\n### Anatomy\n\n<Row>\n<Column colLg={8}>\n\n![Tile anatomy](images/tile-usage-6.png)\n\n</Column>\n</Row>\n\n1. **Container**: Includes a title, optional label, and the close icon.\n\n2. **Content area**: Contains the information and/or controls needed to complete\n   the modal's task. It can include message text and components.\n\n### Sizing\n\nThe **width** varies depending on three basic grid modes: wide, narrow, and\ncondensed. The **height** varies depending on the amount of content placed\nwithin it, but still follows the aspect ratio.\n\n[Aspect ratios](https://www.carbondesignsystem.com/guidelines/2x-grid/overview/#aspect-ratio)\nare written out as a formula of width to height, such as 3:2. It’s important to\nremember that while two images can have the same aspect ratio, they can have\nvarying images sizes.\n\n<Row>\n<Column colLg={8}>\n\n![Example image of expandable tiles.](images/tile-usage-7.png)\n\n<Caption>Tiles get wider as the browser gets larger </Caption>\n\n</Column>\n</Row>\n\n### Alignment\n\nAlways strive for left alignment whenver possible. Type in tiles should always\nbe left aligned. Icons or icon buttons can be aligned to either left or right\nedge depending on the tiles’ complexity.\n\nFor example: In situations where there are both an icon or pictogram with an\nicon button, place the icon or pictorgram in the lower left corner of the tile\nand move the icon button (action) to the right corner.\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do left align icon, link, or text when it is by itself.\">\n\n![Do left align icon, link, or text when it is by itself.](images/tile-usage-8.png)\n\n  </DoDont>\n\n  <DoDont type=\"dont\" caption=\"Do not right align an icon, link, or text when it is by itself\">\n\n![Do not right align an icon, link, or text when it is by itself.](images/tile-usage-9.png)\n\n  </DoDont>\n</DoDontRow>\n\n<DoDontRow>\n\n  <DoDont type=\"do\" caption=\"Do move icon to the right when there is an icon or pictogram.\">\n\n![Do move icon to the right when there is an icon or pictogram.](images/tile-usage-10.png)\n\n  </DoDont>\n\n  <DoDont type=\"do\" caption=\"Do move icon to the right when there is text or link.\">\n\n![Do move icon to the right when there is text or link.](images/tile-usage-11.png)\n\n  </DoDont>\n</DoDontRow>\n\n### Placement\n\n#### Tile groups\n\nTile groups are a useful way of aligning tiles that have a strong relationship.\nTile groups flow horizontally left to right usually and have similar\nhierarchical importance like navigation or catalog tiles.\n\n<Row>\n<Column colLg={12}>\n\n![Example image of how tiles are built on the wide grid.](images/tile-usage-13.png)\n\n<Caption>Example image of how tiles are built on the wide grid.</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={12}>\n\n![Example image of how tiles are built on the narrow grid.](images/tile-usage-14.png)\n\n<Caption>Example image of how tiles are built on the narrow grid.</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={12}>\n\n![Example image of how tiles are built on the condensed grid.](images/tile-usage-15.png)\n\n<Caption>Example image of how tiles are built on the condensed grid.</Caption>\n\n</Column>\n</Row>\n\n#### Layout\n\nThere are three basic layouts for tiles: **standard**, **vertical masonry**, and\n**horizontal masonry**. The standard layout will be the most commonly used\nversion.\n\n- Standard layout tiles are the same in height and width as the rest of them in\n  the group.\n- A vertical masonry layout can vary in height, but is consistent in width.\n- A horizontal masonry layout can vary in width. Rows of tiles may vary in\n  height, but the tiles within a row should be consistent in height.\n\n<Row>\n<Column colLg={4}>\n\n![Standard layout for tiles](/images/tile-usage-16.png)\n\n<Caption>Standard layout for tiles</Caption>\n\n</Column>\n\n<Column colLg={4}>\n\n![An example of the standard layout](/images/tile-usage-17.png)\n\n<Caption>An example of the standard layout</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={4}>\n\n![Vertical masonry layout for tiles](/images/tile-usage-18.png)\n\n<Caption>Vertical masonry layout for tiles</Caption>\n\n</Column>\n\n<Column colLg={4}>\n\n![An example of the vertical masonry layout](images/tile-usage-19.png)\n\n<Caption>An example of the vertical masonry layout </Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={4}>\n\n![Horizonal masonry layout for tiles](/images/tile-usage-20.png)\n\n<Caption>Horizonal masonry layout for tiles</Caption>\n\n</Column>\n\n<Column colLg={4}>\n\n![An example of the horizonal masonry layout](images/tile-usage-21.png)\n\n<Caption>An example of the horizonal masonry layout </Caption>\n\n</Column>\n</Row>\n\n### Elevation\n\nTiles reside in the same plane as the background layer—they do not have\nelevation. Do not add drop shadows to tiles. Tiles organize essential\ninformation and have the same visual hierarchy as content within the same page.\nModals, popovers, and dialogs do have elevation but are not inherently part of\nthe user's main workstream and are invoked on screen to reveal secondary\ninformation, actions, or notifications.\n\n### Call-to-actions\n\nFor **base, selectable, and expandable tiles**, use `$link-01` when icon and\nlink are paired together or use `$interactive-04` when the icon stands alone.\n\nFor **clickable tiles**, don’t highlight text or icons to avoid them being\nconfused as links or clickable.\n\n<DoDontRow>\n\n  <DoDont type=\"do\" caption=\"Do use text or icon for clickable tiles if needed.\">\n\n![Do use text or icon for clickable tiles if needed.](images/tile-usage-22.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not use link or highlight the icon color for clickable tiles.\">\n\n![Do not use link or highlight the icon color for clickable tiles.](images/tile-usage-23.png)\n\n  </DoDont>\n</DoDontRow>\n\n## Behaviors\n\n### Interactions\n\n#### Mouse\n\nUsers can trigger an item by clicking anywhere in any tile container, except\nbase tiles.\n\n<Row>\n<Column colLg={8}>\n\n![Clickable, expandable, and selectable tiles are clickable anywhere within the tile.](images/tile-usage-24.png)\n\n<Caption>\n  Clickable, expandable, and selectable tiles are clickable anywhere within the\n  tile.\n</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![Base tiles are static, except buttons or links .](images/tile-usage-25.png)\n\n<Caption>Base tiles are static, except buttons or links .</Caption>\n\n</Column>\n</Row>\n\nExpandable tiles can either be triggered as a whole or only contain internal\nCTA's if they are given their own click targets and the tile’s click target is\nreduced to only the chevron icon.\n\n<InlineNotification>\n\n**Note:** Clickable targets are currently not available in coding. Teams can\noverride the code to make smaller click targets while we're updating this in the\nfuture.\n\n</InlineNotification>\n\n<Row>\n<Column colLg={8}>\n\n![Clickable, expandable, and selectable tiles are clickable anywhere within the tile.](images/tile-usage-26.png)\n\n</Column>\n</Row>\n\n#### Keyboard\n\nSpecific keyboard interactions will depend on the type of tile you are using and\nwhat content it contains but all types of tiles can take focus.\n\n| Key             | Interaction                                                                                                                                                                |\n| --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Tab             | Move forward through tiles (if tiles themselves are clickable) and interactive elements within the tiles in a logical order                                                |\n| Shift + Tab     | Move backward through tiles (if tiles themselves are clickable) and interactive elements within the tiles in a logical order                                               |\n| Return or Enter | Return or enter will open the tile (if the tile itself is clickable). If the tile is not clickable but has interactive elements, their corresponding actions are performed |\n| Space           | If the tile is selectable, the space bar will toggle tile selection                                                                                                        |\n\n## Related\n\n#### Grid\n\nTo learn more about how to build tiles correctly on the grid, see Carbon’s\n[2x grid](/guidelines/2x-grid/implementation).\n\n#### Aspect ratio\n\nAspect ratio is important when building tiles and images. For further guidance,\nsee Carbon’s\n[Aspect ratio](https://www.carbondesignsystem.com/guidelines/2x-grid/overview/#aspect-ratio)\nand its\n[implementation](https://www.carbondesignsystem.com/guidelines/2x-grid/implementation#screen-regions).\n\n#### Buttons\n\nWhen in doubt, use full-span button alignment within tiles. For further\nguidance, see Carbon’s [buttons](/components/buttons/usage).\n\n#### Link\n\nLink has variants depending on the context. For further guidance, see Carbon’s\n[link](/components/buttons/usage).\n\n## References\n\nHagan Rivers,\n[Interactions design with cards/tiles](https://medium.com/@hagan.rivers/interaction-design-with-cards-tiles-5a6895aa220d/)\n(Medium, 2017)\n\n## Feedback\n\nHelp us improve this component by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","type":"Mdx","contentDigest":"99f700f9841523485488b4e9b85dc8c9","owner":"gatsby-plugin-mdx","counter":4262},"frontmatter":{"title":"Tile","description":"Tiles are a flexible component for displaying a wide variety of content, including informational, getting started, how-to, next steps, and more.","tabs":["Usage","Style","Code","Accessibility"]},"exports":{},"rawBody":"---\ntitle: Tile\ndescription:\n  Tiles are a flexible component for displaying a wide variety of content,\n  including informational, getting started, how-to, next steps, and more.\ntabs: ['Usage', 'Style', 'Code', 'Accessibility']\n---\n\n<PageDescription>\n\nTiles are a highly flexible component for displaying a wide variety of content,\nincluding information, getting started, how-to, next steps, and more.\n\n</PageDescription>\n\n<InlineNotification>\n\nTile guidance has been recently updated but is not yet applicable for all\nimplementations. Please continue following the guidance and we'll work on fixing\nthe issues.\n\n</InlineNotification>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Live demo</AnchorLink>\n<AnchorLink>Tile variants</AnchorLink>\n<AnchorLink>Formatting</AnchorLink>\n<AnchorLink>Behaviors</AnchorLink>\n<AnchorLink>Related</AnchorLink>\n<AnchorLink>References</AnchorLink>\n<AnchorLink>Feedback</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nCarbon ships a basic tile structure that responds to the grid. Based on the\nlayout structure, tiles can contain type, images and/or a block of color. As\ntiles have no pre-set styles for the content within them, the tile component\nusage guidance is purposefully high-level. It focuses specifically on the tile\nitself, not the structure of the information or interactive elements that the\ntile contains—that type of information will be found in the card pattern.\n\n#### Tiles versus Cards\n\nTiles are simple and foundational. Cards can be very complex. They are built\nupon the tile foundation and have various patterns, multiple actions, overflow\nmenus, selectable features, etc. Carbon does not have a Card pattern yet, but we\nlink out to several card patterns within our pattern asset library (PAL)\necosystem below:\n\n- [Productive vs. Expressive cards](https://pages.github.ibm.com/cdai-design/pal/components/card/overview/)\n  (Carbon for Cloud & Cognitive)\n- [Dashboard cards](https://pages.github.ibm.com/ai-applications/design/patterns/dashboards-v2/overview/#dashboard-cards)\n  (AI Applications Design)\n- [Card](https://www.ibm.com/standards/carbon/components/card) (Carbon for\n  IBM.com)\n\n### When to use\n\nTiles are reusable components that provide shortcuts to building cards and other\nmodules. Here are some common use cases for when to use tiles:\n\n- To contain related groupings of information or actions\n- To guide users to take actions or navigate\n- To present options for single or multiple selections\n- To hide or show large amounts of content\n\n## Live demo\n\n<ComponentDemo\n  components={[\n    {\n      id: 'tile',\n      label: 'Default tile',\n    },\n    {\n      id: 'clickable-tile',\n      label: 'Clickable tile',\n    },\n    {\n      id: 'radio-tile',\n      label: 'Radio tile',\n    },\n    {\n      id: 'selectable-tile',\n      label: 'Selectable tile',\n    },\n    {\n      id: 'expandable-tile',\n      label: 'Expandable tile',\n    },\n  ]}\n>\n  <ComponentVariant\n    id=\"tile\"\n    knobs={{\n      Tile: ['light'],\n    }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/components-tile--default',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-tiles--basic',\n      Vue: 'http://vue.carbondesignsystem.com/?path=/story/components-cvtile--default',\n      'Web Components':\n        'https://web-components.carbondesignsystem.com/?path=/story/components-tile--default',\n    }}\n  >\n    {`\n    <Tile>\n      Default tile\n    </Tile>\n  `}\n  </ComponentVariant>\n  <ComponentVariant\n    id=\"clickable-tile\"\n    knobs={{\n      ClickableTile: ['light', 'clicked'],\n    }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/components-tile--clickable',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-tiles--basic',\n      Vue: 'http://vue.carbondesignsystem.com/?path=/story/components-cvtile--default',\n      'Web Components':\n        'https://web-components.carbondesignsystem.com/?path=/story/components-tile--clickable',\n    }}\n  >\n    {`\n    <ClickableTile\n      href=\"#\"\n    >\n      Clickable tile\n    </ClickableTile>\n  `}\n  </ComponentVariant>\n  <ComponentVariant\n    id=\"radio-tile\"\n    knobs={{\n      RadioTile: ['light'],\n    }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/components-tile--radio',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-tiles--clickable',\n      Vue: 'http://vue.carbondesignsystem.com/?path=/story/components-cvtile--clickable',\n      'Web Components':\n        'https://web-components.carbondesignsystem.com/?path=/story/components-tile--single-selectable',\n    }}\n  >\n    {`\n    <TileGroup\n      defaultSelected=\"default-selected\"\n      legend=\"Radio tile group\"\n      name=\"tile-group\"\n    >\n      <RadioTile\n        id=\"tile-1\"\n        name=\"tiles\"\n        tabIndex={0}\n        value=\"standard\"\n      >\n        Radio tile\n      </RadioTile>\n      <RadioTile\n        id=\"tile-2\"\n        name=\"tiles\"\n        tabIndex={0}\n        value=\"default-selected\"\n      >\n        Radio tile\n      </RadioTile>\n      <RadioTile\n        id=\"tile-3\"\n        name=\"tiles\"\n        tabIndex={0}\n        value=\"selected\"\n      >\n        Radio tile\n      </RadioTile>\n    </TileGroup>\n  `}\n  </ComponentVariant>\n  <ComponentVariant\n    id=\"selectable-tile\"\n    knobs={{\n      SelectableTile: ['light', 'selected'],\n    }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/components-tile--multi-select',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-tiles--selectable',\n      Vue: 'http://vue.carbondesignsystem.com/?path=/story/components-cvtile--selectable',\n      'Web Components':\n        'https://web-components.carbondesignsystem.com/?path=/story/components-tile--single-selectable',\n    }}\n  >\n    {`\n    <div\n      aria-label=\"selectable tiles\"\n      role=\"group\"\n    >\n      <SelectableTile\n        id=\"tile-1\"\n        name=\"tiles\"\n        tabIndex={0}\n        title=\"title\"\n        value=\"value\"\n      >\n        Multiselect tile\n      </SelectableTile>\n      <SelectableTile\n        id=\"tile-2\"\n        name=\"tiles\"\n        tabIndex={0}\n        title=\"title\"\n        value=\"value\"\n      >\n        Multiselect tile\n      </SelectableTile>\n      <SelectableTile\n        id=\"tile-3\"\n        name=\"tiles\"\n        tabIndex={0}\n        title=\"title\"\n        value=\"value\"\n      >\n        Multiselect tile\n      </SelectableTile>\n    </div>\n  `}\n  </ComponentVariant>\n  <ComponentVariant\n    id=\"expandable-tile\"\n    knobs={{\n      ExpandableTile: ['light', 'expanded'],\n    }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/components-tile--expandable',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-tiles--expandable',\n      Vue: 'http://vue.carbondesignsystem.com/?path=/story/components-cvtile--expandable',\n      'Web Components':\n        'https://web-components.carbondesignsystem.com/?path=/story/components-tile--expandable',\n    }}\n  >\n    {`\n    <ExpandableTile\n      tabIndex={0}\n      tileCollapsedIconText=\"Interact to Expand tile\"\n      tileExpandedIconText=\"Interact to Collapse tile\"\n      tileMaxHeight={0}\n      tilePadding={0}\n    >\n      <TileAboveTheFoldContent>\n        <div style={{ height: '64px'}}>\n          Above the fold content here\n        </div>\n      </TileAboveTheFoldContent>\n      <TileBelowTheFoldContent>\n        <div style={{ height: '64px'}}>\n          Below the fold content here\n        </div>\n      </TileBelowTheFoldContent>\n    </ExpandableTile>\n  `}\n  </ComponentVariant>\n</ComponentDemo>\n\n## Tile variants\n\nTiles can function or be implemented in four ways—base, clickable, selectable,\nor expandable. These variations of tiles are flexible enough to support a\nvariety of different use cases when building more complicating card features.\n\n| Variant                   | Purpose                                                                                                  |\n| ------------------------- | -------------------------------------------------------------------------------------------------------- |\n| [Base](#base)             | For high-level, short, and digestible content pieces such as features, plans, or services offered        |\n| [Clickable](#clickable)   | For prompting an action, navigating or directing to other pieces of information about the subject matter |\n| [Selectable](#selectable) | For presenting options to a user in a structured manner, such as a set of pricing plans                  |\n| [Expandable](#expandable) | For hiding and revealing a large amount of content in order to focus on specific pieces of info          |\n\n### Base\n\nBase tiles are used to display information to the user, such as features or\nservices offered. Base tiles are often seen on marketing pages to promote\ncontent or on dashboards that are highly interactive. These tiles can have\ninternal calls-to-action (CTAs), such as a [button](/components/button/usage) or\na [link](/components/link/usage).\n\n<Row>\n<Column colLg={12}>\n\n![Example image of base tiles.](images/tile-usage-1.png)\n\n</Column>\n</Row>\n\n### Clickable\n\nClickable tiles can be used as navigational items, where the entire tile is a\nclickable state, which redirects the user to a new page. Clickable tiles cannot\ncontain separate internal CTAs but can contain pictograms, icons, or media such\nas illustrations or images.\n\n<Row>\n<Column colLg={12}>\n\n![Example image of clickable tiles](images/tile-usage-2.png)\n\n</Column>\n</Row>\n\n### Selectable\n\nSelectable tiles work well for presenting options to a user in a structured\nmanner, such as a set of pricing plans. Selectable tiles may contain internal\nCTAs (like links to docs) if the internal CTA is given its own click target.\n\nSelectable tiles can either have a single select state working like a\n[radio button](/components/radio-button/usage), or multi-select state working as\na [checkbox](/components/checkbox/usage).\n\n<Row>\n<Column colLg={8}>\n\n![Selectable radio-button / single select tiles](images/tile-usage-3.png)\n\n<Caption>Single select tiles work like radio-buttons</Caption>\n\n![Selectable checkbox / multi-select tiles](images/tile-usage-4.png)\n\n<Caption>Multi-select tiles work like checkboxes </Caption>\n\n</Column>\n</Row>\n\n### Expandable\n\nExpandable tiles are helpful for hiding and showing large amounts of content to\na user. When expanded, tiles push content down the page. They allow the user to\nspecifically focus on featured content while having access to the rest of the\ninformation. Expandable tiles can contain internal CTAs (like links to docs) if\nthey are given their own click targets and the click target is reduced to only\nthe chevron icon.\n\n<Row>\n<Column colLg={8}>\n\n![Example image of expandable tiles/ single select tiles](images/tile-usage-5.gif)\n\n</Column>\n</Row>\n\n## Formatting\n\n### Anatomy\n\n<Row>\n<Column colLg={8}>\n\n![Tile anatomy](images/tile-usage-6.png)\n\n</Column>\n</Row>\n\n1. **Container**: Includes a title, optional label, and the close icon.\n\n2. **Content area**: Contains the information and/or controls needed to complete\n   the modal's task. It can include message text and components.\n\n### Sizing\n\nThe **width** varies depending on three basic grid modes: wide, narrow, and\ncondensed. The **height** varies depending on the amount of content placed\nwithin it, but still follows the aspect ratio.\n\n[Aspect ratios](https://www.carbondesignsystem.com/guidelines/2x-grid/overview/#aspect-ratio)\nare written out as a formula of width to height, such as 3:2. It’s important to\nremember that while two images can have the same aspect ratio, they can have\nvarying images sizes.\n\n<Row>\n<Column colLg={8}>\n\n![Example image of expandable tiles.](images/tile-usage-7.png)\n\n<Caption>Tiles get wider as the browser gets larger </Caption>\n\n</Column>\n</Row>\n\n### Alignment\n\nAlways strive for left alignment whenver possible. Type in tiles should always\nbe left aligned. Icons or icon buttons can be aligned to either left or right\nedge depending on the tiles’ complexity.\n\nFor example: In situations where there are both an icon or pictogram with an\nicon button, place the icon or pictorgram in the lower left corner of the tile\nand move the icon button (action) to the right corner.\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do left align icon, link, or text when it is by itself.\">\n\n![Do left align icon, link, or text when it is by itself.](images/tile-usage-8.png)\n\n  </DoDont>\n\n  <DoDont type=\"dont\" caption=\"Do not right align an icon, link, or text when it is by itself\">\n\n![Do not right align an icon, link, or text when it is by itself.](images/tile-usage-9.png)\n\n  </DoDont>\n</DoDontRow>\n\n<DoDontRow>\n\n  <DoDont type=\"do\" caption=\"Do move icon to the right when there is an icon or pictogram.\">\n\n![Do move icon to the right when there is an icon or pictogram.](images/tile-usage-10.png)\n\n  </DoDont>\n\n  <DoDont type=\"do\" caption=\"Do move icon to the right when there is text or link.\">\n\n![Do move icon to the right when there is text or link.](images/tile-usage-11.png)\n\n  </DoDont>\n</DoDontRow>\n\n### Placement\n\n#### Tile groups\n\nTile groups are a useful way of aligning tiles that have a strong relationship.\nTile groups flow horizontally left to right usually and have similar\nhierarchical importance like navigation or catalog tiles.\n\n<Row>\n<Column colLg={12}>\n\n![Example image of how tiles are built on the wide grid.](images/tile-usage-13.png)\n\n<Caption>Example image of how tiles are built on the wide grid.</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={12}>\n\n![Example image of how tiles are built on the narrow grid.](images/tile-usage-14.png)\n\n<Caption>Example image of how tiles are built on the narrow grid.</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={12}>\n\n![Example image of how tiles are built on the condensed grid.](images/tile-usage-15.png)\n\n<Caption>Example image of how tiles are built on the condensed grid.</Caption>\n\n</Column>\n</Row>\n\n#### Layout\n\nThere are three basic layouts for tiles: **standard**, **vertical masonry**, and\n**horizontal masonry**. The standard layout will be the most commonly used\nversion.\n\n- Standard layout tiles are the same in height and width as the rest of them in\n  the group.\n- A vertical masonry layout can vary in height, but is consistent in width.\n- A horizontal masonry layout can vary in width. Rows of tiles may vary in\n  height, but the tiles within a row should be consistent in height.\n\n<Row>\n<Column colLg={4}>\n\n![Standard layout for tiles](/images/tile-usage-16.png)\n\n<Caption>Standard layout for tiles</Caption>\n\n</Column>\n\n<Column colLg={4}>\n\n![An example of the standard layout](/images/tile-usage-17.png)\n\n<Caption>An example of the standard layout</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={4}>\n\n![Vertical masonry layout for tiles](/images/tile-usage-18.png)\n\n<Caption>Vertical masonry layout for tiles</Caption>\n\n</Column>\n\n<Column colLg={4}>\n\n![An example of the vertical masonry layout](images/tile-usage-19.png)\n\n<Caption>An example of the vertical masonry layout </Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={4}>\n\n![Horizonal masonry layout for tiles](/images/tile-usage-20.png)\n\n<Caption>Horizonal masonry layout for tiles</Caption>\n\n</Column>\n\n<Column colLg={4}>\n\n![An example of the horizonal masonry layout](images/tile-usage-21.png)\n\n<Caption>An example of the horizonal masonry layout </Caption>\n\n</Column>\n</Row>\n\n### Elevation\n\nTiles reside in the same plane as the background layer—they do not have\nelevation. Do not add drop shadows to tiles. Tiles organize essential\ninformation and have the same visual hierarchy as content within the same page.\nModals, popovers, and dialogs do have elevation but are not inherently part of\nthe user's main workstream and are invoked on screen to reveal secondary\ninformation, actions, or notifications.\n\n### Call-to-actions\n\nFor **base, selectable, and expandable tiles**, use `$link-01` when icon and\nlink are paired together or use `$interactive-04` when the icon stands alone.\n\nFor **clickable tiles**, don’t highlight text or icons to avoid them being\nconfused as links or clickable.\n\n<DoDontRow>\n\n  <DoDont type=\"do\" caption=\"Do use text or icon for clickable tiles if needed.\">\n\n![Do use text or icon for clickable tiles if needed.](images/tile-usage-22.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not use link or highlight the icon color for clickable tiles.\">\n\n![Do not use link or highlight the icon color for clickable tiles.](images/tile-usage-23.png)\n\n  </DoDont>\n</DoDontRow>\n\n## Behaviors\n\n### Interactions\n\n#### Mouse\n\nUsers can trigger an item by clicking anywhere in any tile container, except\nbase tiles.\n\n<Row>\n<Column colLg={8}>\n\n![Clickable, expandable, and selectable tiles are clickable anywhere within the tile.](images/tile-usage-24.png)\n\n<Caption>\n  Clickable, expandable, and selectable tiles are clickable anywhere within the\n  tile.\n</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![Base tiles are static, except buttons or links .](images/tile-usage-25.png)\n\n<Caption>Base tiles are static, except buttons or links .</Caption>\n\n</Column>\n</Row>\n\nExpandable tiles can either be triggered as a whole or only contain internal\nCTA's if they are given their own click targets and the tile’s click target is\nreduced to only the chevron icon.\n\n<InlineNotification>\n\n**Note:** Clickable targets are currently not available in coding. Teams can\noverride the code to make smaller click targets while we're updating this in the\nfuture.\n\n</InlineNotification>\n\n<Row>\n<Column colLg={8}>\n\n![Clickable, expandable, and selectable tiles are clickable anywhere within the tile.](images/tile-usage-26.png)\n\n</Column>\n</Row>\n\n#### Keyboard\n\nSpecific keyboard interactions will depend on the type of tile you are using and\nwhat content it contains but all types of tiles can take focus.\n\n| Key             | Interaction                                                                                                                                                                |\n| --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Tab             | Move forward through tiles (if tiles themselves are clickable) and interactive elements within the tiles in a logical order                                                |\n| Shift + Tab     | Move backward through tiles (if tiles themselves are clickable) and interactive elements within the tiles in a logical order                                               |\n| Return or Enter | Return or enter will open the tile (if the tile itself is clickable). If the tile is not clickable but has interactive elements, their corresponding actions are performed |\n| Space           | If the tile is selectable, the space bar will toggle tile selection                                                                                                        |\n\n## Related\n\n#### Grid\n\nTo learn more about how to build tiles correctly on the grid, see Carbon’s\n[2x grid](/guidelines/2x-grid/implementation).\n\n#### Aspect ratio\n\nAspect ratio is important when building tiles and images. For further guidance,\nsee Carbon’s\n[Aspect ratio](https://www.carbondesignsystem.com/guidelines/2x-grid/overview/#aspect-ratio)\nand its\n[implementation](https://www.carbondesignsystem.com/guidelines/2x-grid/implementation#screen-regions).\n\n#### Buttons\n\nWhen in doubt, use full-span button alignment within tiles. For further\nguidance, see Carbon’s [buttons](/components/buttons/usage).\n\n#### Link\n\nLink has variants depending on the context. For further guidance, see Carbon’s\n[link](/components/buttons/usage).\n\n## References\n\nHagan Rivers,\n[Interactions design with cards/tiles](https://medium.com/@hagan.rivers/interaction-design-with-cards-tiles-5a6895aa220d/)\n(Medium, 2017)\n\n## Feedback\n\nHelp us improve this component by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","fileAbsolutePath":"/home/runner/work/carbon-website/carbon-website/src/pages/components/tile/usage.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}