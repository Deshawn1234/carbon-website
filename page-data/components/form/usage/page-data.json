{
    "componentChunkName": "component---src-pages-components-form-usage-mdx",
    "path": "/components/form/usage/",
    "result": {"pageContext":{"frontmatter":{"title":"Form","description":"Forms are used for submitting data. Consider each field and what value the data will provide.","tabs":["Usage","Style","Code","Accessibility"]},"relativePagePath":"/components/form/usage.mdx","titleType":"prepend","MdxNode":{"id":"f87699a0-9a7e-563d-8148-0025491943b9","children":[],"parent":"f5e9b968-f803-598f-a23e-ceb0440f626c","internal":{"content":"---\ntitle: Form\ndescription:\n  Forms are used for submitting data. Consider each field and what value the\n  data will provide.\ntabs: ['Usage', 'Style', 'Code', 'Accessibility']\n---\n\n<PageDescription>\n\nA form is a group of related input controls that allows users to provide data or\nconfigure options.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Live demo</AnchorLink>\n<AnchorLink>Formatting</AnchorLink>\n<AnchorLink>Form logic</AnchorLink>\n<AnchorLink>Validation and errors</AnchorLink>\n<AnchorLink>Feedback</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nForms are used for submitting data so be as concise as possible when designing.\nKeep it short. Think about each field and what value the data will provide. What\ndo you gain by collecting this information?\n\n#### Begin by asking:\n\n- Is this a piece of information that is valuable to us?\n- Is this a piece of information that is so valuable that it's worth preventing\n  the user from continuing if they choose not to provide it?\n\n## Live demo\n\n<ComponentDemo\n  components={[\n    {\n      id: 'form',\n      label: 'Form',\n    },\n  ]}\n>\n  <ComponentVariant\n    id=\"form\"\n    knobs={{\n      TextInput: ['disabled', 'invalid', 'light', 'type'],\n      TextArea: ['disabled', 'invalid', 'light'],\n      Select: ['disabled', 'invalid', 'light', 'inline'],\n      SelectItem: ['disabled', 'hidden'],\n    }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/components-form--default',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-input--label',\n      Vue: 'http://vue.carbondesignsystem.com/?path=/story/components-cvform--default',\n      'Web Components':\n        'https://web-components.carbondesignsystem.com/?path=/story/components-input--form-item',\n    }}\n  >\n    {`\n  <Form>\n  <Stack gap={7}>\n    <TextInput\n      helperText=\"Optional helper text here; if message is more than one line text should wrap (~100 character count maximum)\"\n      id=\"test2\"\n      invalidText=\"Invalid error message.\"\n      labelText=\"Text input label\"\n      placeholder=\"Placeholder text\"\n    />\n  <TextArea\n    cols={50}\n    helperText=\"Optional helper text here; if message is more than one line text should wrap (~100 character count maximum)\"\n    id=\"test5\"\n    invalidText=\"Invalid error message.\"\n    labelText=\"Text area label\"\n    placeholder=\"Placeholder text\"\n    rows={4}\n  />\n    <Select\n      defaultValue=\"placeholder-item\"\n      id=\"select-1\"\n      invalidText=\"This is an invalid error message.\"\n      labelText=\"Select\"\n    >\n      <SelectItem\n        text=\"Option 1\"\n        value=\"option-1\"\n      />\n      <SelectItem\n        text=\"Option 2\"\n        value=\"option-2\"\n      />\n      <SelectItem\n        text=\"Option 3\"\n        value=\"option-3\"\n      />\n    </Select>\n  <Button\n    kind=\"primary\"\n    tabIndex={0}\n    type=\"submit\"\n  >\n    Submit\n  </Button>\n  </Stack>\n</Form>\n  `}\n  </ComponentVariant>\n</ComponentDemo>\n\n## Formatting\n\nAll forms are comprised of six elements:\n\n- **Labels:** Inform users what the corresponding input fields mean.\n- **Input fields:** Enable users to provide information. Information can be\n  entered through a variety of different input fields ranging from text fields,\n  checkboxes, and many other types.\n- **Helper text:** Provides assistance on how to fill out a field. Helper text\n  is optional.\n- **Placeholder text:** Hints at what goes into a field. Placeholder text is\n  optional.\n- **Actions:** Allow users to submit a form.\n- **Validation:** Ensures the data submitted by the user conforms to acceptable\n  parameters.\n\n<Row>\n<Column colLg={8}>\n\n![effective form design](images/form-usage-1.png)\n\n</Column>\n</Row>\n\n### Button placement\n\nOn non-modal or in-page forms, align single buttons or Secondary / Primary\nbutton groups to the left. Buttons should align with the form controls\nregardless of the user‘s window width.\n\n<Row>\n<Column colLg={8}>\n\n![Primary button alignment in Forms](images/form-usage-5.png)\n\n<Caption>Single button alignment in forms</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![Secondary / Primary button alignment in forms](images/form-usage-6.png)\n\n<Caption>Secondary / Primary button alignment in forms</Caption>\n\n</Column>\n</Row>\n\n### Multistep forms\n\nWhen the primary action implies a navigation step forward, as in a wizard, align\nsingle buttons or Secondary/Primary button groups to the right. This position\nconveys the “next step” intention.\n\n<Row>\n<Column colLg={8}>\n\n![Primary button alignment in a wizard](images/form-usage-7.png)\n\n<Caption>Single button alignment in a wizard</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![Primary button alignment in a wizard](images/form-usage-8.png)\n\n<Caption>Secondary / Primary button pair alignment in a wizard</Caption>\n\n</Column>\n</Row>\n\n## Content\n\n### Labels\n\nEffective form labeling helps users understand what information to enter into a\nText Input. Using a placeholder text as a label is often applied as a\nspace-saving method. However, this is not recommended because it hides context\nand presents accessibility issues.\n\n#### Accessibility best practices for labels:\n\n- Labels must be visible when an input gets focus.\n- Labels must be announced to the screen reader on focus.\n- Ensure the helper text that appears under an input is read when an assistive\n  technology user stops at an input using ARIA.\n- Use sentence-style capitalization (only the first word in a phrase and any\n  proper nouns capitalized).\n\n### Default values\n\nWhere possible, add programmatic assistance. Detect and pre-fill inputs to\nreduce errors and save time. When the software can't determine the value that\nbelongs in an input, use type-ahead to make suggestions. Use sentence-case for\ndefault values, detected values, and auto-completion text.\n\n### Helper text\n\nHelper text is pertinent information that assists the user in completing a\nfield. Helper text is always available when the input is focused and appears\nunderneath the label. Use sentence-style capitalization, and in most cases,\nwrite the text as full sentences with punctuation.\n\n### Placeholder text\n\nPlaceholder text provides hints or examples of what to enter. Placeholder text\ndisappears after the user begins entering data into the Input and should not\ncontain crucial information. Use sentence-style capitalization, and in most\ncases, write the text as a direct statement without punctuation.\n\n## Form logic\n\n- **Radio buttons** are used when there is a list of two or more options that\n  are mutually exclusive and the user must select exactly one choice. In other\n  words, clicking a non-selected radio button will deselect whatever other\n  button was previously selected in the list.\n- **Checkboxes** are used when there are lists of options and the user may\n  select any number of choices, including zero, one, or several. In other words,\n  each checkbox is independent of all other checkboxes in the list, so checking\n  one box doesn’t uncheck the others. A stand-alone checkbox, or a toggle can be\n  used for a single option that the user can turn on or off.\n- **Select elements** are used for fields in which a single selection is\n  required and there are a large number of possible options.\n\n<Row>\n<Column colLg={8}>\n\n![form logic](images/form-usage-4.png)\n\n</Column>\n</Row>\n\n## Validation and errors\n\n### Error messaging\n\nEffective error messaging can help the user to understand the problem and how to\nfix it. First, inform the user what has happened, then provide guidance on next\nsteps or possible resolutions.\n[Inline notifications](/components/notification/usage) can be used to state the\ngeneral problem with the users input, such as _“Please input the required\nfields.”_ Inline Notifications can occur pre or post submission, depending on\nthe type of data the user is inputting.\n\n### Form validation\n\nWe recommend validating the users data before form submission. Use visual cues\nto guide the user as to where the problem lies within the form. This will help\nto easily identify the elements that need to be corrected.\n\nThe validation should appear when the user has clicked away from the text field.\nOnce the user corrects the errors within the text field, the validation should\ndisappear once the data is rendered as valid.\n\nThe validation label below the field should be as informative as possible when\ndescribing the issue with the users data. For example, if password limitations\nrequire 16 characters, but the user inputs a password with only six characters,\nthe text should read something like, _\"Password must be at least 16\ncharacters.\"_\n\n<Row>\n<Column colLg={8}>\n\n![form validation](images/form-validation.gif)\n\n</Column>\n</Row>\n\n### Optional versus required fields\n\nWhen designing your form, consider the purpose and the use case, and note if the\nmajority of the fields are **required** or **optional**.\n\n- If the majority of the fields are required, mark **only** the optional fields\n  with (optional).\n- If the majority of the fields are optional, mark **only** the required fields \n  with (required).\n\nUsing the appropriate pattern based on the use case will reduce visual noise and\nclutter; helping your users to more quickly and accurately complete the form. It\nwill also ensure consistency through and across products.\n\nIf you choose to mark only optional form fields, it is recommended that an\ninstruction precedes the form stating either “All fields are required” or “All\nfields are required unless marked optional”.\n\n<Row>\n<Column colLg={8}>\n\n![Example of a short user sign-up form using the optional pattern](images/form-usage-optional.png)\n\n<Caption>\n  Example of a short user sign-up form using the optional pattern\n</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![Example of product configuration properties using the required pattern](images/form-usage-required.png)\n\n<Caption>\n  Example of product configuration properties using the required pattern\n</Caption>\n\n</Column>\n</Row>\n\n## Feedback\n\nHelp us improve this component by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","type":"Mdx","contentDigest":"d11c63eac13ed613cedb822af61b919c","owner":"gatsby-plugin-mdx","counter":4246},"frontmatter":{"title":"Form","description":"Forms are used for submitting data. Consider each field and what value the data will provide.","tabs":["Usage","Style","Code","Accessibility"]},"exports":{},"rawBody":"---\ntitle: Form\ndescription:\n  Forms are used for submitting data. Consider each field and what value the\n  data will provide.\ntabs: ['Usage', 'Style', 'Code', 'Accessibility']\n---\n\n<PageDescription>\n\nA form is a group of related input controls that allows users to provide data or\nconfigure options.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Live demo</AnchorLink>\n<AnchorLink>Formatting</AnchorLink>\n<AnchorLink>Form logic</AnchorLink>\n<AnchorLink>Validation and errors</AnchorLink>\n<AnchorLink>Feedback</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nForms are used for submitting data so be as concise as possible when designing.\nKeep it short. Think about each field and what value the data will provide. What\ndo you gain by collecting this information?\n\n#### Begin by asking:\n\n- Is this a piece of information that is valuable to us?\n- Is this a piece of information that is so valuable that it's worth preventing\n  the user from continuing if they choose not to provide it?\n\n## Live demo\n\n<ComponentDemo\n  components={[\n    {\n      id: 'form',\n      label: 'Form',\n    },\n  ]}\n>\n  <ComponentVariant\n    id=\"form\"\n    knobs={{\n      TextInput: ['disabled', 'invalid', 'light', 'type'],\n      TextArea: ['disabled', 'invalid', 'light'],\n      Select: ['disabled', 'invalid', 'light', 'inline'],\n      SelectItem: ['disabled', 'hidden'],\n    }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/components-form--default',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-input--label',\n      Vue: 'http://vue.carbondesignsystem.com/?path=/story/components-cvform--default',\n      'Web Components':\n        'https://web-components.carbondesignsystem.com/?path=/story/components-input--form-item',\n    }}\n  >\n    {`\n  <Form>\n  <Stack gap={7}>\n    <TextInput\n      helperText=\"Optional helper text here; if message is more than one line text should wrap (~100 character count maximum)\"\n      id=\"test2\"\n      invalidText=\"Invalid error message.\"\n      labelText=\"Text input label\"\n      placeholder=\"Placeholder text\"\n    />\n  <TextArea\n    cols={50}\n    helperText=\"Optional helper text here; if message is more than one line text should wrap (~100 character count maximum)\"\n    id=\"test5\"\n    invalidText=\"Invalid error message.\"\n    labelText=\"Text area label\"\n    placeholder=\"Placeholder text\"\n    rows={4}\n  />\n    <Select\n      defaultValue=\"placeholder-item\"\n      id=\"select-1\"\n      invalidText=\"This is an invalid error message.\"\n      labelText=\"Select\"\n    >\n      <SelectItem\n        text=\"Option 1\"\n        value=\"option-1\"\n      />\n      <SelectItem\n        text=\"Option 2\"\n        value=\"option-2\"\n      />\n      <SelectItem\n        text=\"Option 3\"\n        value=\"option-3\"\n      />\n    </Select>\n  <Button\n    kind=\"primary\"\n    tabIndex={0}\n    type=\"submit\"\n  >\n    Submit\n  </Button>\n  </Stack>\n</Form>\n  `}\n  </ComponentVariant>\n</ComponentDemo>\n\n## Formatting\n\nAll forms are comprised of six elements:\n\n- **Labels:** Inform users what the corresponding input fields mean.\n- **Input fields:** Enable users to provide information. Information can be\n  entered through a variety of different input fields ranging from text fields,\n  checkboxes, and many other types.\n- **Helper text:** Provides assistance on how to fill out a field. Helper text\n  is optional.\n- **Placeholder text:** Hints at what goes into a field. Placeholder text is\n  optional.\n- **Actions:** Allow users to submit a form.\n- **Validation:** Ensures the data submitted by the user conforms to acceptable\n  parameters.\n\n<Row>\n<Column colLg={8}>\n\n![effective form design](images/form-usage-1.png)\n\n</Column>\n</Row>\n\n### Button placement\n\nOn non-modal or in-page forms, align single buttons or Secondary / Primary\nbutton groups to the left. Buttons should align with the form controls\nregardless of the user‘s window width.\n\n<Row>\n<Column colLg={8}>\n\n![Primary button alignment in Forms](images/form-usage-5.png)\n\n<Caption>Single button alignment in forms</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![Secondary / Primary button alignment in forms](images/form-usage-6.png)\n\n<Caption>Secondary / Primary button alignment in forms</Caption>\n\n</Column>\n</Row>\n\n### Multistep forms\n\nWhen the primary action implies a navigation step forward, as in a wizard, align\nsingle buttons or Secondary/Primary button groups to the right. This position\nconveys the “next step” intention.\n\n<Row>\n<Column colLg={8}>\n\n![Primary button alignment in a wizard](images/form-usage-7.png)\n\n<Caption>Single button alignment in a wizard</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![Primary button alignment in a wizard](images/form-usage-8.png)\n\n<Caption>Secondary / Primary button pair alignment in a wizard</Caption>\n\n</Column>\n</Row>\n\n## Content\n\n### Labels\n\nEffective form labeling helps users understand what information to enter into a\nText Input. Using a placeholder text as a label is often applied as a\nspace-saving method. However, this is not recommended because it hides context\nand presents accessibility issues.\n\n#### Accessibility best practices for labels:\n\n- Labels must be visible when an input gets focus.\n- Labels must be announced to the screen reader on focus.\n- Ensure the helper text that appears under an input is read when an assistive\n  technology user stops at an input using ARIA.\n- Use sentence-style capitalization (only the first word in a phrase and any\n  proper nouns capitalized).\n\n### Default values\n\nWhere possible, add programmatic assistance. Detect and pre-fill inputs to\nreduce errors and save time. When the software can't determine the value that\nbelongs in an input, use type-ahead to make suggestions. Use sentence-case for\ndefault values, detected values, and auto-completion text.\n\n### Helper text\n\nHelper text is pertinent information that assists the user in completing a\nfield. Helper text is always available when the input is focused and appears\nunderneath the label. Use sentence-style capitalization, and in most cases,\nwrite the text as full sentences with punctuation.\n\n### Placeholder text\n\nPlaceholder text provides hints or examples of what to enter. Placeholder text\ndisappears after the user begins entering data into the Input and should not\ncontain crucial information. Use sentence-style capitalization, and in most\ncases, write the text as a direct statement without punctuation.\n\n## Form logic\n\n- **Radio buttons** are used when there is a list of two or more options that\n  are mutually exclusive and the user must select exactly one choice. In other\n  words, clicking a non-selected radio button will deselect whatever other\n  button was previously selected in the list.\n- **Checkboxes** are used when there are lists of options and the user may\n  select any number of choices, including zero, one, or several. In other words,\n  each checkbox is independent of all other checkboxes in the list, so checking\n  one box doesn’t uncheck the others. A stand-alone checkbox, or a toggle can be\n  used for a single option that the user can turn on or off.\n- **Select elements** are used for fields in which a single selection is\n  required and there are a large number of possible options.\n\n<Row>\n<Column colLg={8}>\n\n![form logic](images/form-usage-4.png)\n\n</Column>\n</Row>\n\n## Validation and errors\n\n### Error messaging\n\nEffective error messaging can help the user to understand the problem and how to\nfix it. First, inform the user what has happened, then provide guidance on next\nsteps or possible resolutions.\n[Inline notifications](/components/notification/usage) can be used to state the\ngeneral problem with the users input, such as _“Please input the required\nfields.”_ Inline Notifications can occur pre or post submission, depending on\nthe type of data the user is inputting.\n\n### Form validation\n\nWe recommend validating the users data before form submission. Use visual cues\nto guide the user as to where the problem lies within the form. This will help\nto easily identify the elements that need to be corrected.\n\nThe validation should appear when the user has clicked away from the text field.\nOnce the user corrects the errors within the text field, the validation should\ndisappear once the data is rendered as valid.\n\nThe validation label below the field should be as informative as possible when\ndescribing the issue with the users data. For example, if password limitations\nrequire 16 characters, but the user inputs a password with only six characters,\nthe text should read something like, _\"Password must be at least 16\ncharacters.\"_\n\n<Row>\n<Column colLg={8}>\n\n![form validation](images/form-validation.gif)\n\n</Column>\n</Row>\n\n### Optional versus required fields\n\nWhen designing your form, consider the purpose and the use case, and note if the\nmajority of the fields are **required** or **optional**.\n\n- If the majority of the fields are required, mark **only** the optional fields\n  with (optional).\n- If the majority of the fields are optional, mark **only** the required fields \n  with (required).\n\nUsing the appropriate pattern based on the use case will reduce visual noise and\nclutter; helping your users to more quickly and accurately complete the form. It\nwill also ensure consistency through and across products.\n\nIf you choose to mark only optional form fields, it is recommended that an\ninstruction precedes the form stating either “All fields are required” or “All\nfields are required unless marked optional”.\n\n<Row>\n<Column colLg={8}>\n\n![Example of a short user sign-up form using the optional pattern](images/form-usage-optional.png)\n\n<Caption>\n  Example of a short user sign-up form using the optional pattern\n</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![Example of product configuration properties using the required pattern](images/form-usage-required.png)\n\n<Caption>\n  Example of product configuration properties using the required pattern\n</Caption>\n\n</Column>\n</Row>\n\n## Feedback\n\nHelp us improve this component by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","fileAbsolutePath":"/home/runner/work/carbon-website/carbon-website/src/pages/components/form/usage.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}