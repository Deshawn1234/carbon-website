{
    "componentChunkName": "component---src-pages-developing-react-tutorial-step-3-mdx",
    "path": "/developing/react-tutorial/step-3/",
    "result": {"pageContext":{"frontmatter":{"title":"3. Using APIs","description":"Welcome to Carbon! This tutorial will guide you in creating a React app with the Carbon Design System.","tabs":["Overview","Step 1","Step 2","Step 3","Step 4","Step 5","Wrapping up","FAQ"]},"relativePagePath":"/developing/react-tutorial/step-3.mdx","titleType":"prepend","MdxNode":{"id":"eda9fc2a-eade-572d-98dd-8ef839e770bd","children":[],"parent":"e313048c-3ecc-5af7-bc7f-a9bc46f9924c","internal":{"content":"---\ntitle: 3. Using APIs\ndescription:\n  Welcome to Carbon! This tutorial will guide you in creating a React app with\n  the Carbon Design System.\ntabs:\n  [\n    'Overview',\n    'Step 1',\n    'Step 2',\n    'Step 3',\n    'Step 4',\n    'Step 5',\n    'Wrapping up',\n    'FAQ',\n  ]\n---\n\nimport Preview from 'components/Preview';\n\n<PageDescription>\n\nThis step takes our static components and populates them with data from the\nGitHub GraphQL API – loading states and all. We'll be displaying Carbon\nrepository information in a data table.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Fork, clone and branch</AnchorLink>\n<AnchorLink>Install dependencies</AnchorLink>\n<AnchorLink>Create access token</AnchorLink>\n<AnchorLink>Connect to Apollo</AnchorLink>\n<AnchorLink>Fetch data</AnchorLink>\n<AnchorLink>Populate data table</AnchorLink>\n<AnchorLink>Add loading</AnchorLink>\n<AnchorLink>Add pagination</AnchorLink>\n<AnchorLink>Submit pull request</AnchorLink>\n\n</AnchorLinks>\n\n### Preview\n\nThe [GitHub GraphQL API](https://docs.github.com/en/graphql) is very well\ndocumented, and even though the focus of this tutorial isn't learning and using\nGraphQL, it's a great opportunity to fetch Carbon-related data for this Carbon\ntutorial.\n\nTo do so, we'll be using Apollo Client, the front-end component of the\n[Apollo Platform](https://www.apollographql.com/docs/intro/platform/). Apollo\nprovides several open source tools for using GraphQL throughout your\napplication’s stack. Apollo Client is a sophisticated GraphQL client that\nmanages data and state in an application.\n\nA [preview](https://react-step-4--carbon-tutorial.netlify.com) of what you will\nbuild (see repositories page):\n\n<Preview\n  height=\"400\"\n  title=\"Carbon Tutorial Step 3\"\n  src=\"https://react-step-4--carbon-tutorial.netlify.com\"\n  frameborder=\"no\"\n  allowtransparency=\"true\"\n  allowfullscreen=\"true\"\n/>\n\n## Fork, clone and branch\n\nThis tutorial has an accompanying GitHub repository called\n[carbon-tutorial](https://github.com/carbon-design-system/carbon-tutorial) that\nwe'll use as a starting point for each step. If you haven't forked and cloned\nthat repository yet, and haven't added the upstream remote, go ahead and do so\nby following the\n[step 1 instructions](/developing/react-tutorial/step-1#fork-clone-and-branch).\n\n### Branch\n\nWith your repository all set up, let's check out the branch for this tutorial\nstep's starting point.\n\n```bash\ngit fetch upstream\ngit checkout -b v11-react-step-3 upstream/v11-react-step-3\n```\n\n### Build and start app\n\nInstall the app's dependencies:\n\n```bash\nyarn\n```\n\nThen, start the app:\n\n```bash\nyarn start\n```\n\nYou should see something similar to where the\n[previous step](/developing/react-tutorial/step-2) left off. Stop your app with\n`CTRL-C` and let's get everything installed.\n\n## Install dependencies\n\nWe'll need to install three new dependencies to incorporate Apollo into our\napplication.\n\n- `@apollo/client` - package containing everything you need to set up Apollo\n  Client\n- `graphql` - parses your GraphQL queries\n\nInstall them with the command:\n\n```bash\nyarn add @apollo/client@3.4.10 graphql@15.5.2\n```\n\n## Create access token\n\nYou'll need a personal access token from your GitHub account in order to make\nrequests to the GitHub API. Check out\n[this guide](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)\nto see how to get one.\n\nWhen you get to the scope/permissions step, you can leave them all unchecked. We\ndon't need any special permissions, we just need access to the public API.\n\nOnce you have your token, we need to put it in a place where create-react-app\ncan use it. When your application is being built and developed, create-react-app\nwill parse environmental variables in any file that starts with `.env` and make\nthem available under `process.env.MY_VARIABLE`.\n\nOne caveat is that we need to start our variables with `REACT_APP_`. You can\nread more about environmental variables in\n[create-react-app's guide](https://create-react-app.dev/docs/adding-custom-environment-variables/).\n\nSince we don't want to commit this file to Git, we can put it in `.env.local`\nwhich is in our `.gitignore` list. Your file should just have a single line like\nthis one, where the `x`s are replaced with your unique token.\n\n```bash path=.env.local\nREACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN=xxxxxx\n```\n\nGo ahead and start your app with `yarn start`, or, if your app is running,\nyou'll need to restart it to get access to this token.\n\n## Connect to Apollo\n\nThe `@apollo/client` library gives us the components that we need to put at the\nbase of our application. Typically the best place for things that need to wrap\nthe entire application is at the root of the application. For us, that's at\n`src/index.js`.\n\nAdd these imports to `src/index.js`:\n\n```javascript path=src/index.js\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\n```\n\nNext, define the cache and make your client by providing a URI for the GitHub\nGraphQL API as well as an authorization header using the environmental variable\nyou just added to `.env.local`.\n\n```javascript path=src/index.js\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  cache: cache,\n  uri: 'https://api.github.com/graphql',\n  headers: {\n    authorization: `Bearer ${process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN}`,\n  },\n});\n```\n\nNow we can wrap our application with `ApolloProvider`. At the same time, we'll\npass in the client we just made as a prop to the `ApolloProvider` component.\nReplace:\n\n```jsx path=src/index.js\n<Router>\n  <App />\n</Router>\n```\n\nWith:\n\n```jsx path=src/index.js\n<ApolloProvider client={client}>\n  <Router>\n    <App />\n  </Router>\n</ApolloProvider>\n```\n\n## Fetch data\n\n### Imports\n\nAdd the following imports below the react import in `RepoPage.js`:\n\n```javascript path=src/content/RepoPage/RepoPage.js\nimport { gql, useQuery } from '@apollo/client';\n```\n\n### Query\n\nNext we'll assemble our GraphQL query to fetch only the data we need from the\nGraphQL API. We'll do this using the `gql` helper we just imported. The `gql`\nhelper lets you write GraphQL queries using interpolated strings (backticks) in\nJavaScript. In addition, we'll be using the `useQuery` component from\n`@apollo/client` which gives us some great information about our query's loading\nstate in addition to the data.\n\nYou can use GitHub's\n[explorer](https://docs.github.com/en/graphql/overview/explorer) tool to write\nand test your own queries. Try copying the query below and experiment with\nchanging the properties. You can also click the \"Docs\" button in the top right\nof the explorer to view all of the available data and query parameters.\n\nIf you'd like some more information regarding writing queries and using the\nQuery component, we recommend\n[Apollo's documentation](https://www.apollographql.com/tutorials/fullstack-quickstart/fetching-data-with-queries)\non this topic.\n\nAdd this after your imports:\n\n```graphql path=src/content/RepoPage/RepoPage.js\nconst REPO_QUERY = gql`\n  query REPO_QUERY {\n    # Let's use carbon as our organization\n    organization(login: \"carbon-design-system\") {\n      # We'll grab all the repositories in one go. To load more resources\n      # continuously, see the advanced topics.\n      repositories(first: 75, orderBy: { field: UPDATED_AT, direction: DESC }) {\n        totalCount\n        nodes {\n          url\n          homepageUrl\n          issues(filterBy: { states: OPEN }) {\n            totalCount\n          }\n          stargazers {\n            totalCount\n          }\n          releases(first: 1) {\n            totalCount\n            nodes {\n              name\n            }\n          }\n          name\n          updatedAt\n          createdAt\n          description\n          id\n        }\n      }\n    }\n  }\n`;\n```\n\n### Helpers\n\nBelow that, we should have our table headers set in a previous step that are\ngood to go. Let's also keep our example rows below that.\n\nOur last column in the data table will be a comma-separated list of repository\nand home page links, so let's create a component called `LinkList`.\n\nImport `Link` at the top of `RepoPage.js`. The imports should look like this.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nimport { Link, Grid, Column } from '@carbon/react';\n```\n\nThen use `Link` in this component that has two props (`url` and `homepageUrl`)\nand returns an unordered list. If the repository does not have a home page URL,\nonly render the repository link.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nconst LinkList = ({ url, homepageUrl }) => (\n  <ul style={{ display: 'flex' }}>\n    <li>\n      <Link href={url}>GitHub</Link>\n    </li>\n    {homepageUrl && (\n      <li>\n        <span>&nbsp;|&nbsp;</span>\n        <Link href={homepageUrl}>Homepage</Link>\n      </li>\n    )}\n  </ul>\n);\n```\n\nAs a final helper, let's create a function that transforms row data to our\nexpected header keys. Notice how we're using our new `LinkList` component to\ngenerate the value of the `links` key in each row.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nconst getRowItems = (rows) =>\n  rows.map((row) => ({\n    ...row,\n    key: row.id,\n    stars: row.stargazers.totalCount,\n    issueCount: row.issues.totalCount,\n    createdAt: new Date(row.createdAt).toLocaleDateString(),\n    updatedAt: new Date(row.updatedAt).toLocaleDateString(),\n    links: <LinkList url={row.url} homepageUrl={row.homepageUrl} />,\n  }));\n```\n\n### Query component\n\nAt this point, we should run our query and `console.log()` the results to verify\nthat the request is working.\n\nThe `useQuery` component from `@apollo/client` lets us render different content\nbased on the state of our request. When `loading` is true, we'll render\n`Loading...` for the time being. If there's an issue, we'll render the\ncorresponding error message using `error`.\n\nFinally, if neither of those are true, it means we have our data! One nice\nadvantage of GraphQL is that as long as there are no errors, we can be certain\nthe properties on the data we requested aren't `null`.\n\nWe need to define the `loading`, `error`, and `data` using `useQuery`. We will\nupdate the beginning of the `RepoPage` component with the following.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nconst { loading, error, data } = useQuery(REPO_QUERY);\n```\n\nNotice how we're passing the `REPO_QUERY` that we previously defined into the\n`useQuery` hook.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nif (loading) {\n  return 'Loading...';\n}\n\nif (error) {\n  return `Error! ${error.message}`;\n}\n\nif (data) {\n  // If we're here, we've got our data!\n  console.log(data.organization);\n}\n```\n\nThe page will look the same as we're still rendering our static example rows,\nbut if you view your browser's console (e.g.\n[Chrome DevTools](https://developer.chrome.com/docs/devtools/)), you should see\nthe response from GitHub!\n\n## Populate data table\n\nNow that we have that data, let's populate the data table. Replace\n`console.log(data.organization);` inside `if (data)` with the following that\ndestructures the `data.organization` object. Once we have the repositories, we\ncan call our `getRowItems()` helper to build the data table rows.\n\nHere will will also add our grid we previously made. The `data` should now look\nlike this:\n\n```javascript path=src/content/RepoPage/RepoPage.js\n// If we're here, we've got our data!\nconst { repositories } = data.organization;\nconst rows = getRowItems(repositories.nodes);\n\nreturn (\n  <Grid className=\"repo-page\">\n    <Column lg={16} md={8} sm={4} className=\"repo-page__r1\">\n      <RepoTable headers={headers} rows={rows} />\n    </Column>\n  </Grid>\n);\n```\n\nThen, towards the top of `RepoPage.js` delete the `rows` array because we no\nlonger need the example rows.\n\n### Render repository descriptions\n\nThe data table component and its pieces use a common React pattern called\n[render props](https://reactjs.org/docs/render-props.html). This is a really\npowerful way for libraries to give developers control of rendering and\nmanipulating their data.\n\nRevisiting `RepoTable.js`, we are already passing in our row objects along with\nheaders for each column. The `render` prop is being used to tell the data table\nhow to render the headers and rows. That prop takes a function that receives the\nprocessed headers and rows as arguments as well as some helper functions for\nrendering the table.\n\nOne common hurdle with the data table is how to access data that might not\ncorrespond with a table column but is needed to compute the value of a cell that\ndoes. The data table component processes and controls only the row properties\nwhich corresponds to headers (columns). Because of this, the `rows` object you\nget access to in the render prop function is _different_ than the one you passed\nin to the `rows` prop.\n\nWe need to modify one aspect of the data table because if you expand a row, it\nsays `Row description`. We want to update that with the repository description\ncoming from the GitHub API. This is an example of where we need a simple look-up\nfunction to find the data we care about - data that does not directly correspond\nto a column.\n\nTo do so, in `RepoTable.js`, add this look-up function as the first lines inside\nthe `RepoTable`. This should go immediately before the component's `return()`.\n\n```javascript path=src/content/RepoPage/RepoTable.js\nconst getRowDescription = (rowId) => {\n  const row = rows.find(({ id }) => id === rowId);\n  return row ? row.description : '';\n};\n```\n\nFinally, in `RepoTable.js`, replace `<p>Row description</p>` with:\n\n```html path=src/content/RepoPage/RepoTable.js\n<p>{getRowDescription(row.id)}</p>\n```\n\n## Add loading\n\nAt this point, the first time that you visit the repositories page, we're\nquerying the GitHub API and rendering the response through the `DataTable`\ncomponent. We could stop here, but there's more to be done! Let's replace the\n`Loading...` string with the\n[DataTableSkeleton component](https://react.carbondesignsystem.com/?path=/story/components-datatable--skeleton).\n\nTo do so, back to `RepoPage.js`, add the `DataTableSkeleton` import by modifying\nthe existing `carbon-components-react` import.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nimport { Link, DataTableSkeleton, Grid, Column } from '@carbon/react';\n```\n\nThen replace the `if (loading) return 'Loading...';` with:\n\n```javascript path=src/content/RepoPage/RepoPage.js\nif (loading) {\n  return (\n    <Grid className=\"repo-page\">\n      <Column lg={16} md={8} sm={4} className=\"repo-page__r1\">\n        <DataTableSkeleton\n          columnCount={headers.length + 1}\n          rowCount={10}\n          headers={headers}\n        />\n      </Column>\n    </Grid>\n  );\n}\n```\n\nWe need to tell the loading skeleton how many rows to render, so let's use 10\nskeleton rows to prepare for the next enhancement...\n\n## Add pagination\n\nPagination! Instead of rendering every repository, let's add pagination to the\ndata table to only render 10 at a time. Depending on your specific requirements,\nyou may need to fetch new data each time that you interact with the pagination\ncomponent, but for simplicity, we're going to make one request to fetch all\ndata, and then paginate the in-memory row data.\n\nWe'll be using [React Hooks](https://reactjs.org/docs/hooks-intro.html) to\nmanage our state.\n\nImport React's [useState](https://reactjs.org/docs/hooks-state.html) by\nmodifying the `React` import.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nimport React, { useState } from 'react';\n```\n\nThen initialize the new state variables that we'll use for pagination as the\nfirst lines inside the `RepoPage`.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nconst RepoPage = () => {\n  const [firstRowIndex, setFirstRowIndex] = useState(0);\n  const [currentPageSize, setCurrentPageSize] = useState(10);\n...\n```\n\nThis initializes the total number of rows and the index of the first row to `0`,\nand the page size to `10` as we also specified in our loading skeleton.\n\nThen we need to update our `RepoTable` `rows` prop to only render the subset of\nrows for the current \"page\". Update\n`<RepoTable headers={headers} rows={rows} />` to:\n\n```javascript path=src/content/RepoPage/RepoPage.js\n<RepoTable\n  headers={headers}\n  rows={rows.slice(firstRowIndex, firstRowIndex + currentPageSize)}\n/>\n```\n\n<InlineNotification>\n\n**Note:** We only pass the rows that we want our table to display. We can do\nthis by slicing the our array of rows depending on the first item and the page\nsize.\n\n</InlineNotification>\n\nFinally, let's add the `Pagination` to update our state variables and cause the\ndata table to render new rows.\n\nImport `Pagination` by updating the `@carbon/react` import.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nimport {\n  Link,\n  DataTableSkeleton,\n  Pagination,\n  Grid,\n  Column,\n} from '@carbon/react';\n```\n\nImmediately after the `RepoTable` closing tag (`/>`), add the `Pagination`\ncomponent using the state variables that we previously initialized.\n\n```javascript path=src/content/RepoPage/RepoPage.js\n<Pagination\n  totalItems={rows.length}\n  backwardText=\"Previous page\"\n  forwardText=\"Next page\"\n  pageSize={currentPageSize}\n  pageSizes={[5, 10, 15, 25]}\n  itemsPerPageText=\"Items per page\"\n  onChange={({ page, pageSize }) => {\n    if (pageSize !== currentPageSize) {\n      setCurrentPageSize(pageSize);\n    }\n    setFirstRowIndex(pageSize * (page - 1));\n  }}\n/>\n```\n\n<InlineNotification>\n\n**Note:** The `Pagination` component isn't inherently connected in any way to\nthe `DataTable` - we need to tell it what to do when a change occurs using the\n`onChange` prop. This includes both page size changes and displaying different\nrows.\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** Like the other Carbon React components, `Pagination` component\nexamples can be found in\n[Storybook](https://react.carbondesignsystem.com/?path=/story/components-pagination--pagination)\nby browsing the story and knobs.\n\n</InlineNotification>\n\nThat does it! Your data table should fetch GitHub data on first render. You can\nexpand each row to see the repository's description. You can modify the\npagination items per page and cycle through pages or jump to a specific page of\nrepositories.\n\n## Submit pull request\n\nWe're going to submit a pull request to verify completion of this tutorial step.\n\n### Continuous integration (CI) check\n\nRun the CI check to make sure we're all set to submit a pull request.\n\n```bash\nyarn ci-check\n```\n\n<InlineNotification>\n\n**Note:** Having issues running the CI check?\n[Step 1](</developing/react-tutorial/step-1#continuous-integration-(ci)-check>)\nhas troubleshooting notes that may help.\n\n</InlineNotification>\n\n### Git commit and push\n\nBefore we can create a pull request, format your code, then stage and commit all\nof your changes:\n\n```bash\nyarn format\ngit add --all && git commit -m \"feat(tutorial): complete step 3\"\n```\n\nThen, push to your repository:\n\n```bash\ngit push origin v11-react-step-3\n```\n\n<InlineNotification>\n\n**Note:** Having issues pushing your changes?\n[Step 1](/developing/react-tutorial/step-1#git-commit-and-push) has\ntroubleshooting notes that may help.\n\n</InlineNotification>\n\n### Pull request (PR)\n\nFinally, visit\n[carbon-tutorial](https://github.com/carbon-design-system/carbon-tutorial) to\n\"Compare & pull request\". In doing so, make sure that you are comparing to\n`react-step-3` into `base: react-step-3`.\n\n<InlineNotification>\n\n**Note:** Expect your tutorial step PRs to be reviewed by the Carbon team but\nnot merged. We'll close your PR so we can keep the repository's remote branches\npristine and ready for the next person!\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** If your PR fails the CircleCI test with the error\n`Can't make a request in offline mode`, try running the following command:\n`rm -rf .yarn-offline-mirror node_modules && yarn cache clean && yarn install`.\nAdd and commit the changes once this completes, and try pushing again.\n\n</InlineNotification>\n","type":"Mdx","contentDigest":"58e96533690a6241f82e5d12c9237474","owner":"gatsby-plugin-mdx","counter":4387},"frontmatter":{"title":"3. Using APIs","description":"Welcome to Carbon! This tutorial will guide you in creating a React app with the Carbon Design System.","tabs":["Overview","Step 1","Step 2","Step 3","Step 4","Step 5","Wrapping up","FAQ"]},"exports":{},"rawBody":"---\ntitle: 3. Using APIs\ndescription:\n  Welcome to Carbon! This tutorial will guide you in creating a React app with\n  the Carbon Design System.\ntabs:\n  [\n    'Overview',\n    'Step 1',\n    'Step 2',\n    'Step 3',\n    'Step 4',\n    'Step 5',\n    'Wrapping up',\n    'FAQ',\n  ]\n---\n\nimport Preview from 'components/Preview';\n\n<PageDescription>\n\nThis step takes our static components and populates them with data from the\nGitHub GraphQL API – loading states and all. We'll be displaying Carbon\nrepository information in a data table.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Fork, clone and branch</AnchorLink>\n<AnchorLink>Install dependencies</AnchorLink>\n<AnchorLink>Create access token</AnchorLink>\n<AnchorLink>Connect to Apollo</AnchorLink>\n<AnchorLink>Fetch data</AnchorLink>\n<AnchorLink>Populate data table</AnchorLink>\n<AnchorLink>Add loading</AnchorLink>\n<AnchorLink>Add pagination</AnchorLink>\n<AnchorLink>Submit pull request</AnchorLink>\n\n</AnchorLinks>\n\n### Preview\n\nThe [GitHub GraphQL API](https://docs.github.com/en/graphql) is very well\ndocumented, and even though the focus of this tutorial isn't learning and using\nGraphQL, it's a great opportunity to fetch Carbon-related data for this Carbon\ntutorial.\n\nTo do so, we'll be using Apollo Client, the front-end component of the\n[Apollo Platform](https://www.apollographql.com/docs/intro/platform/). Apollo\nprovides several open source tools for using GraphQL throughout your\napplication’s stack. Apollo Client is a sophisticated GraphQL client that\nmanages data and state in an application.\n\nA [preview](https://react-step-4--carbon-tutorial.netlify.com) of what you will\nbuild (see repositories page):\n\n<Preview\n  height=\"400\"\n  title=\"Carbon Tutorial Step 3\"\n  src=\"https://react-step-4--carbon-tutorial.netlify.com\"\n  frameborder=\"no\"\n  allowtransparency=\"true\"\n  allowfullscreen=\"true\"\n/>\n\n## Fork, clone and branch\n\nThis tutorial has an accompanying GitHub repository called\n[carbon-tutorial](https://github.com/carbon-design-system/carbon-tutorial) that\nwe'll use as a starting point for each step. If you haven't forked and cloned\nthat repository yet, and haven't added the upstream remote, go ahead and do so\nby following the\n[step 1 instructions](/developing/react-tutorial/step-1#fork-clone-and-branch).\n\n### Branch\n\nWith your repository all set up, let's check out the branch for this tutorial\nstep's starting point.\n\n```bash\ngit fetch upstream\ngit checkout -b v11-react-step-3 upstream/v11-react-step-3\n```\n\n### Build and start app\n\nInstall the app's dependencies:\n\n```bash\nyarn\n```\n\nThen, start the app:\n\n```bash\nyarn start\n```\n\nYou should see something similar to where the\n[previous step](/developing/react-tutorial/step-2) left off. Stop your app with\n`CTRL-C` and let's get everything installed.\n\n## Install dependencies\n\nWe'll need to install three new dependencies to incorporate Apollo into our\napplication.\n\n- `@apollo/client` - package containing everything you need to set up Apollo\n  Client\n- `graphql` - parses your GraphQL queries\n\nInstall them with the command:\n\n```bash\nyarn add @apollo/client@3.4.10 graphql@15.5.2\n```\n\n## Create access token\n\nYou'll need a personal access token from your GitHub account in order to make\nrequests to the GitHub API. Check out\n[this guide](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)\nto see how to get one.\n\nWhen you get to the scope/permissions step, you can leave them all unchecked. We\ndon't need any special permissions, we just need access to the public API.\n\nOnce you have your token, we need to put it in a place where create-react-app\ncan use it. When your application is being built and developed, create-react-app\nwill parse environmental variables in any file that starts with `.env` and make\nthem available under `process.env.MY_VARIABLE`.\n\nOne caveat is that we need to start our variables with `REACT_APP_`. You can\nread more about environmental variables in\n[create-react-app's guide](https://create-react-app.dev/docs/adding-custom-environment-variables/).\n\nSince we don't want to commit this file to Git, we can put it in `.env.local`\nwhich is in our `.gitignore` list. Your file should just have a single line like\nthis one, where the `x`s are replaced with your unique token.\n\n```bash path=.env.local\nREACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN=xxxxxx\n```\n\nGo ahead and start your app with `yarn start`, or, if your app is running,\nyou'll need to restart it to get access to this token.\n\n## Connect to Apollo\n\nThe `@apollo/client` library gives us the components that we need to put at the\nbase of our application. Typically the best place for things that need to wrap\nthe entire application is at the root of the application. For us, that's at\n`src/index.js`.\n\nAdd these imports to `src/index.js`:\n\n```javascript path=src/index.js\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\n```\n\nNext, define the cache and make your client by providing a URI for the GitHub\nGraphQL API as well as an authorization header using the environmental variable\nyou just added to `.env.local`.\n\n```javascript path=src/index.js\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  cache: cache,\n  uri: 'https://api.github.com/graphql',\n  headers: {\n    authorization: `Bearer ${process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN}`,\n  },\n});\n```\n\nNow we can wrap our application with `ApolloProvider`. At the same time, we'll\npass in the client we just made as a prop to the `ApolloProvider` component.\nReplace:\n\n```jsx path=src/index.js\n<Router>\n  <App />\n</Router>\n```\n\nWith:\n\n```jsx path=src/index.js\n<ApolloProvider client={client}>\n  <Router>\n    <App />\n  </Router>\n</ApolloProvider>\n```\n\n## Fetch data\n\n### Imports\n\nAdd the following imports below the react import in `RepoPage.js`:\n\n```javascript path=src/content/RepoPage/RepoPage.js\nimport { gql, useQuery } from '@apollo/client';\n```\n\n### Query\n\nNext we'll assemble our GraphQL query to fetch only the data we need from the\nGraphQL API. We'll do this using the `gql` helper we just imported. The `gql`\nhelper lets you write GraphQL queries using interpolated strings (backticks) in\nJavaScript. In addition, we'll be using the `useQuery` component from\n`@apollo/client` which gives us some great information about our query's loading\nstate in addition to the data.\n\nYou can use GitHub's\n[explorer](https://docs.github.com/en/graphql/overview/explorer) tool to write\nand test your own queries. Try copying the query below and experiment with\nchanging the properties. You can also click the \"Docs\" button in the top right\nof the explorer to view all of the available data and query parameters.\n\nIf you'd like some more information regarding writing queries and using the\nQuery component, we recommend\n[Apollo's documentation](https://www.apollographql.com/tutorials/fullstack-quickstart/fetching-data-with-queries)\non this topic.\n\nAdd this after your imports:\n\n```graphql path=src/content/RepoPage/RepoPage.js\nconst REPO_QUERY = gql`\n  query REPO_QUERY {\n    # Let's use carbon as our organization\n    organization(login: \"carbon-design-system\") {\n      # We'll grab all the repositories in one go. To load more resources\n      # continuously, see the advanced topics.\n      repositories(first: 75, orderBy: { field: UPDATED_AT, direction: DESC }) {\n        totalCount\n        nodes {\n          url\n          homepageUrl\n          issues(filterBy: { states: OPEN }) {\n            totalCount\n          }\n          stargazers {\n            totalCount\n          }\n          releases(first: 1) {\n            totalCount\n            nodes {\n              name\n            }\n          }\n          name\n          updatedAt\n          createdAt\n          description\n          id\n        }\n      }\n    }\n  }\n`;\n```\n\n### Helpers\n\nBelow that, we should have our table headers set in a previous step that are\ngood to go. Let's also keep our example rows below that.\n\nOur last column in the data table will be a comma-separated list of repository\nand home page links, so let's create a component called `LinkList`.\n\nImport `Link` at the top of `RepoPage.js`. The imports should look like this.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nimport { Link, Grid, Column } from '@carbon/react';\n```\n\nThen use `Link` in this component that has two props (`url` and `homepageUrl`)\nand returns an unordered list. If the repository does not have a home page URL,\nonly render the repository link.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nconst LinkList = ({ url, homepageUrl }) => (\n  <ul style={{ display: 'flex' }}>\n    <li>\n      <Link href={url}>GitHub</Link>\n    </li>\n    {homepageUrl && (\n      <li>\n        <span>&nbsp;|&nbsp;</span>\n        <Link href={homepageUrl}>Homepage</Link>\n      </li>\n    )}\n  </ul>\n);\n```\n\nAs a final helper, let's create a function that transforms row data to our\nexpected header keys. Notice how we're using our new `LinkList` component to\ngenerate the value of the `links` key in each row.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nconst getRowItems = (rows) =>\n  rows.map((row) => ({\n    ...row,\n    key: row.id,\n    stars: row.stargazers.totalCount,\n    issueCount: row.issues.totalCount,\n    createdAt: new Date(row.createdAt).toLocaleDateString(),\n    updatedAt: new Date(row.updatedAt).toLocaleDateString(),\n    links: <LinkList url={row.url} homepageUrl={row.homepageUrl} />,\n  }));\n```\n\n### Query component\n\nAt this point, we should run our query and `console.log()` the results to verify\nthat the request is working.\n\nThe `useQuery` component from `@apollo/client` lets us render different content\nbased on the state of our request. When `loading` is true, we'll render\n`Loading...` for the time being. If there's an issue, we'll render the\ncorresponding error message using `error`.\n\nFinally, if neither of those are true, it means we have our data! One nice\nadvantage of GraphQL is that as long as there are no errors, we can be certain\nthe properties on the data we requested aren't `null`.\n\nWe need to define the `loading`, `error`, and `data` using `useQuery`. We will\nupdate the beginning of the `RepoPage` component with the following.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nconst { loading, error, data } = useQuery(REPO_QUERY);\n```\n\nNotice how we're passing the `REPO_QUERY` that we previously defined into the\n`useQuery` hook.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nif (loading) {\n  return 'Loading...';\n}\n\nif (error) {\n  return `Error! ${error.message}`;\n}\n\nif (data) {\n  // If we're here, we've got our data!\n  console.log(data.organization);\n}\n```\n\nThe page will look the same as we're still rendering our static example rows,\nbut if you view your browser's console (e.g.\n[Chrome DevTools](https://developer.chrome.com/docs/devtools/)), you should see\nthe response from GitHub!\n\n## Populate data table\n\nNow that we have that data, let's populate the data table. Replace\n`console.log(data.organization);` inside `if (data)` with the following that\ndestructures the `data.organization` object. Once we have the repositories, we\ncan call our `getRowItems()` helper to build the data table rows.\n\nHere will will also add our grid we previously made. The `data` should now look\nlike this:\n\n```javascript path=src/content/RepoPage/RepoPage.js\n// If we're here, we've got our data!\nconst { repositories } = data.organization;\nconst rows = getRowItems(repositories.nodes);\n\nreturn (\n  <Grid className=\"repo-page\">\n    <Column lg={16} md={8} sm={4} className=\"repo-page__r1\">\n      <RepoTable headers={headers} rows={rows} />\n    </Column>\n  </Grid>\n);\n```\n\nThen, towards the top of `RepoPage.js` delete the `rows` array because we no\nlonger need the example rows.\n\n### Render repository descriptions\n\nThe data table component and its pieces use a common React pattern called\n[render props](https://reactjs.org/docs/render-props.html). This is a really\npowerful way for libraries to give developers control of rendering and\nmanipulating their data.\n\nRevisiting `RepoTable.js`, we are already passing in our row objects along with\nheaders for each column. The `render` prop is being used to tell the data table\nhow to render the headers and rows. That prop takes a function that receives the\nprocessed headers and rows as arguments as well as some helper functions for\nrendering the table.\n\nOne common hurdle with the data table is how to access data that might not\ncorrespond with a table column but is needed to compute the value of a cell that\ndoes. The data table component processes and controls only the row properties\nwhich corresponds to headers (columns). Because of this, the `rows` object you\nget access to in the render prop function is _different_ than the one you passed\nin to the `rows` prop.\n\nWe need to modify one aspect of the data table because if you expand a row, it\nsays `Row description`. We want to update that with the repository description\ncoming from the GitHub API. This is an example of where we need a simple look-up\nfunction to find the data we care about - data that does not directly correspond\nto a column.\n\nTo do so, in `RepoTable.js`, add this look-up function as the first lines inside\nthe `RepoTable`. This should go immediately before the component's `return()`.\n\n```javascript path=src/content/RepoPage/RepoTable.js\nconst getRowDescription = (rowId) => {\n  const row = rows.find(({ id }) => id === rowId);\n  return row ? row.description : '';\n};\n```\n\nFinally, in `RepoTable.js`, replace `<p>Row description</p>` with:\n\n```html path=src/content/RepoPage/RepoTable.js\n<p>{getRowDescription(row.id)}</p>\n```\n\n## Add loading\n\nAt this point, the first time that you visit the repositories page, we're\nquerying the GitHub API and rendering the response through the `DataTable`\ncomponent. We could stop here, but there's more to be done! Let's replace the\n`Loading...` string with the\n[DataTableSkeleton component](https://react.carbondesignsystem.com/?path=/story/components-datatable--skeleton).\n\nTo do so, back to `RepoPage.js`, add the `DataTableSkeleton` import by modifying\nthe existing `carbon-components-react` import.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nimport { Link, DataTableSkeleton, Grid, Column } from '@carbon/react';\n```\n\nThen replace the `if (loading) return 'Loading...';` with:\n\n```javascript path=src/content/RepoPage/RepoPage.js\nif (loading) {\n  return (\n    <Grid className=\"repo-page\">\n      <Column lg={16} md={8} sm={4} className=\"repo-page__r1\">\n        <DataTableSkeleton\n          columnCount={headers.length + 1}\n          rowCount={10}\n          headers={headers}\n        />\n      </Column>\n    </Grid>\n  );\n}\n```\n\nWe need to tell the loading skeleton how many rows to render, so let's use 10\nskeleton rows to prepare for the next enhancement...\n\n## Add pagination\n\nPagination! Instead of rendering every repository, let's add pagination to the\ndata table to only render 10 at a time. Depending on your specific requirements,\nyou may need to fetch new data each time that you interact with the pagination\ncomponent, but for simplicity, we're going to make one request to fetch all\ndata, and then paginate the in-memory row data.\n\nWe'll be using [React Hooks](https://reactjs.org/docs/hooks-intro.html) to\nmanage our state.\n\nImport React's [useState](https://reactjs.org/docs/hooks-state.html) by\nmodifying the `React` import.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nimport React, { useState } from 'react';\n```\n\nThen initialize the new state variables that we'll use for pagination as the\nfirst lines inside the `RepoPage`.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nconst RepoPage = () => {\n  const [firstRowIndex, setFirstRowIndex] = useState(0);\n  const [currentPageSize, setCurrentPageSize] = useState(10);\n...\n```\n\nThis initializes the total number of rows and the index of the first row to `0`,\nand the page size to `10` as we also specified in our loading skeleton.\n\nThen we need to update our `RepoTable` `rows` prop to only render the subset of\nrows for the current \"page\". Update\n`<RepoTable headers={headers} rows={rows} />` to:\n\n```javascript path=src/content/RepoPage/RepoPage.js\n<RepoTable\n  headers={headers}\n  rows={rows.slice(firstRowIndex, firstRowIndex + currentPageSize)}\n/>\n```\n\n<InlineNotification>\n\n**Note:** We only pass the rows that we want our table to display. We can do\nthis by slicing the our array of rows depending on the first item and the page\nsize.\n\n</InlineNotification>\n\nFinally, let's add the `Pagination` to update our state variables and cause the\ndata table to render new rows.\n\nImport `Pagination` by updating the `@carbon/react` import.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nimport {\n  Link,\n  DataTableSkeleton,\n  Pagination,\n  Grid,\n  Column,\n} from '@carbon/react';\n```\n\nImmediately after the `RepoTable` closing tag (`/>`), add the `Pagination`\ncomponent using the state variables that we previously initialized.\n\n```javascript path=src/content/RepoPage/RepoPage.js\n<Pagination\n  totalItems={rows.length}\n  backwardText=\"Previous page\"\n  forwardText=\"Next page\"\n  pageSize={currentPageSize}\n  pageSizes={[5, 10, 15, 25]}\n  itemsPerPageText=\"Items per page\"\n  onChange={({ page, pageSize }) => {\n    if (pageSize !== currentPageSize) {\n      setCurrentPageSize(pageSize);\n    }\n    setFirstRowIndex(pageSize * (page - 1));\n  }}\n/>\n```\n\n<InlineNotification>\n\n**Note:** The `Pagination` component isn't inherently connected in any way to\nthe `DataTable` - we need to tell it what to do when a change occurs using the\n`onChange` prop. This includes both page size changes and displaying different\nrows.\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** Like the other Carbon React components, `Pagination` component\nexamples can be found in\n[Storybook](https://react.carbondesignsystem.com/?path=/story/components-pagination--pagination)\nby browsing the story and knobs.\n\n</InlineNotification>\n\nThat does it! Your data table should fetch GitHub data on first render. You can\nexpand each row to see the repository's description. You can modify the\npagination items per page and cycle through pages or jump to a specific page of\nrepositories.\n\n## Submit pull request\n\nWe're going to submit a pull request to verify completion of this tutorial step.\n\n### Continuous integration (CI) check\n\nRun the CI check to make sure we're all set to submit a pull request.\n\n```bash\nyarn ci-check\n```\n\n<InlineNotification>\n\n**Note:** Having issues running the CI check?\n[Step 1](</developing/react-tutorial/step-1#continuous-integration-(ci)-check>)\nhas troubleshooting notes that may help.\n\n</InlineNotification>\n\n### Git commit and push\n\nBefore we can create a pull request, format your code, then stage and commit all\nof your changes:\n\n```bash\nyarn format\ngit add --all && git commit -m \"feat(tutorial): complete step 3\"\n```\n\nThen, push to your repository:\n\n```bash\ngit push origin v11-react-step-3\n```\n\n<InlineNotification>\n\n**Note:** Having issues pushing your changes?\n[Step 1](/developing/react-tutorial/step-1#git-commit-and-push) has\ntroubleshooting notes that may help.\n\n</InlineNotification>\n\n### Pull request (PR)\n\nFinally, visit\n[carbon-tutorial](https://github.com/carbon-design-system/carbon-tutorial) to\n\"Compare & pull request\". In doing so, make sure that you are comparing to\n`react-step-3` into `base: react-step-3`.\n\n<InlineNotification>\n\n**Note:** Expect your tutorial step PRs to be reviewed by the Carbon team but\nnot merged. We'll close your PR so we can keep the repository's remote branches\npristine and ready for the next person!\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** If your PR fails the CircleCI test with the error\n`Can't make a request in offline mode`, try running the following command:\n`rm -rf .yarn-offline-mirror node_modules && yarn cache clean && yarn install`.\nAdd and commit the changes once this completes, and try pushing again.\n\n</InlineNotification>\n","fileAbsolutePath":"/home/runner/work/carbon-website/carbon-website/src/pages/developing/react-tutorial/step-3.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}