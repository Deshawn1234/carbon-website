{
    "componentChunkName": "component---src-pages-migrating-guide-develop-mdx",
    "path": "/migrating/guide/develop/",
    "result": {"pageContext":{"frontmatter":{"title":"Guide","description":"This guide includes everything you need to migrate your offering from v10 to v11 of Carbon.","tabs":["Overview","Design","Develop"]},"relativePagePath":"/migrating/guide/develop.mdx","titleType":"prepend","MdxNode":{"id":"62679931-0962-5f96-9e11-3480f242b214","children":[],"parent":"3e1035a9-69dd-5afc-90b3-4cc516ca5e43","internal":{"content":"---\ntitle: Guide\ndescription:\n  This guide includes everything you need to migrate your offering from v10 to\n  v11 of Carbon.\ntabs: ['Overview', 'Design', 'Develop']\n---\n\nimport { Tag } from '@carbon/react';\n\n<PageDescription>\n\nStep-by-step guide to updating your code from Carbon v10 to v11.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>carbon-components-react</AnchorLink>\n<AnchorLink>carbon-components</AnchorLink>\n<AnchorLink>@carbon/icons-react</AnchorLink>\n<AnchorLink>carbon-icons</AnchorLink>\n<AnchorLink>Elements</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nThis guide helps you update your project to Carbon v11. It is broken into\nsections based on packages that you are using in your project today. For most\nteams using Carbon, you'll want to use the\n[`carbon-components-react`](#carbon-components-react) section.\n\nOne of the biggest changes coming to Carbon in v11 is that we are moving to\ndedicated packages under the `@carbon` scope. What this means for you is that if\nyou were previously using the following packages:\n\n- `carbon-components`\n- `carbon-components-react`\n- `carbon-icons`\n- `@carbon/icons-react`\n\nYou can access all of this work under one single package: `@carbon/react`. This\npackage will re-export all of the styles and icons for Carbon all in one\ndependency.\n\nIf you were previously using `carbon-components`, the styles from this package\nare available under `@carbon/styles`. They are also re-exported through\n`@carbon/react`\n\nBoth the `carbon-components` and `carbon-components-react` packages will stick\naround in v11 but they will only be re-exports of `@carbon/styles` and\n`@carbon/react` respectively.\n\n<InlineNotification>\n  Some of the migration steps below can be automated using the `@carbon/upgrade`\n  CLI. For full details, see the [`@carbon/upgrade` package\n  documentation](https://github.com/carbon-design-system/carbon/tree/main/packages/upgrade)\n</InlineNotification>\n\n## carbon-components-react\n\nStarting in v11, the React components for Carbon live in the `@carbon/react`\npackage. Alternatively, you can continue to use `carbon-components` as it\nre-exports components from the `@carbon/react` package.\n\nThe `@carbon/react` package also includes the styles for Carbon along with\nicons.\n\n### Step 1: Install @carbon/react\n\nTo get started, uninstall the following packages if they exist in your project:\n\n- `carbon-components`\n- `carbon-components-react`\n- `carbon-icons`\n- `@carbon/icons-react`\n\n```bash\nnpm uninstall carbon-components carbon-components-react carbon-icons @carbon/icons-react\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn remove carbon-components carbon-components-react carbon-icons @carbon/icons-react\n```\n\nNext, install the `@carbon/react` package:\n\n```bash\nnpm install @carbon/react\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn add @carbon/react\n```\n\n### Step 2: Styles and Dart Sass\n\nIf you're importing styles from `carbon-components`, you can now import styles\ndirectly from `@carbon/react` or the `@carbon/react/scss` folder.\n\nBefore you're able to bring in these styles, you'll need to make sure your\nproject is setup to use Dart Sass. Starting in v11, Carbon styles requires Dart\nSass through the `sass` package in order to compile. This change comes from our\nmigration to Sass Modules in order to improve our compilation times and overall\nproject structure.\n\nIf you don't have this dependency already in your project, you can install it:\n\n```bash\nnpm install sass\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn add sass\n```\n\nSimilarly, if you currently use `node-sass` now is a good time to remove that\ndependency from your project. In most situations, Dart Sass is a drop-in\nreplacement for `node-sass` and should require no changes on your end in order\nto use it once you install the dependency.\n\n### Step 3: Setup Dart Sass for your project\n\nOnce you have Dart Sass installed, it's important that you configure your\nproject to support resolving imports in Sass from `node_modules`. Typically,\nthis means adding `node_modules` to your `includePaths` config for Sass in your\nbundler or toolchain of choice.\n\nTo learn more about how to configure your specific toolchain to support this,\nread the documentation for configuration\n[here](https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#configuration).\nWe also have published a guide over on\n[Medium](https://medium.com/carbondesign/migrating-from-node-sass-to-sass-eba9db004a3a)\nto help out with common problems that come from this migration.\n\n### Step 4: Update style import paths\n\nIn v10, you may have been bringing in styles from `carbon-components` by either\nimporting the styles directly with:\n\n```scss\n@import 'carbon-components/scss/globals/scss/styles.scss';\n```\n\nOr, you imported the styles through specific entrypoints:\n\n```scss\n// Feature flags\n$feature-flags: (\n  enable-columns-16: true,\n);\n// Options\n$css--default-type: true;\n$css--reset: true;\n// Top-level imports\n@import 'carbon-components/scss/globals/scss/vars';\n@import 'carbon-components/scss/globals/scss/colors';\n@import 'carbon-components/scss/globals/scss/theme';\n@import 'carbon-components/scss/globals/scss/spacing';\n@import 'carbon-components/scss/globals/scss/typography';\n@import 'carbon-components/scss/globals/scss/css--reset';\n@import 'carbon-components/scss/globals/scss/css--body';\n// Component imports\n@import 'carbon-components/scss/components/accordion/accordion';\n@import 'carbon-components/scss/components/button/button';\n```\n\nIf you imported the entrypoint from `carbon-components`, you can now do this\ndirectly from `@carbon/styles` without any additional paths by writing:\n\n```scss\n@use '@carbon/react';\n```\n\nIf you were providing any configuration options before you imported Carbon you\ncan now provide them using the `with` syntax:\n\n```scss\n@use '@carbon/react' with ($css--default-type: true, $css--reset: true);\n```\n\nIf you were using any feature flags in v10, you can safely remove them in v11.\n\n**Note:** you can also use `@import` to bring in Carbon, if you prefer, although\n`@use` is recommended.\n\nIf you were bringing parts of Carbon, you'll need to update the paths to reflect\nthe new paths in `@carbon/styles`. In general, most paths moved from\n`scss/globals/scss/filename` to `scss/filename`.\n\n```scss\n// Configuration\n@use '@carbon/react/scss/config' with\n  ($css--default-type: true, $css--reset: true);\n// Reset\n@use '@carbon/react/scss/reset';\n// Grid\n@use '@carbon/react/scss/grid';\n// Helpers\n@use '@carbon/react/scss/theme';\n@use '@carbon/react/scss/spacing';\n@use '@carbon/react/scss/type';\n// Components\n@use '@carbon/react/scss/components/accordion';\n@use '@carbon/react/scss/components/button';\n```\n\nFor a full list of the paths that have changed in `carbon-components`, check out\nour\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#changing-import-paths-from-scssglobalsscss-to-scss).\n\n**Note:** if you see any references to `@carbon/styles` for style imports, you\ncan safely replace the beginning of the path with `@carbon/react` for the same\nimport in this package.\n\n### Step 5: Update Sass imports\n\nIf you're project is currently importing from different parts of\n`carbon-components` for specific variables, mixins, or functions then you will\nneed to make sure that your imports have been updated to the correct path.\n\nThe full list of changes are available in our\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#changing-import-paths-from-scssglobalsscss-to-scss)\nbut, in general, most imports have been updates so that the `carbon--` is no\nlonger necessary.\n\n### Step 6: Update JavaScript imports\n\n<InlineNotification>\n  This step can be automated using the `@carbon/upgrade` CLI. For full details,\n  see the `@carbon/upgrade` [package\n  documentation](https://github.com/carbon-design-system/carbon/tree/main/packages/upgrade)\n</InlineNotification>\n\nAfter updating how you bring in styles, you will need to update your import\npaths from `carbon-components-react` to `@carbon/react` for components that\nyou're bringing from Carbon.\n\n```jsx\n// Before\nimport { Accordion, AccordionItem } from 'carbon-components-react';\n// After\nimport { Accordion, AccordionItem } from '@carbon/react';\n```\n\n### Step 7: Update icon imports\n\n<InlineNotification>\n  This step can be automated using the `@carbon/upgrade` CLI. For full details,\n  see the `@carbon/upgrade` [package\n  documentation](https://github.com/carbon-design-system/carbon/tree/main/packages/upgrade)\n</InlineNotification>\n\nThe `@carbon/icons-react` package has been updated to minimize the number of\nexports from the package to help reduce build and compile times. This package is\navailable under `@carbon/react/icons`.\n\nThis update includes a change to the API of the icon components that come from\nthis package. Previously, we would export icons that included the size of the\nasset. This update allows you to bring the icon directly and specify the size\nusing the `size` prop.\n\n**Before**\n\n```jsx\nimport { Add32, Add24, Add20, Add16 } from '@carbon/icons-react';\n\nfunction MyComponent() {\n  return (\n    <>\n      <Add32 />\n      <Add24 />\n      <Add20 />\n      <Add16 />\n    </>\n  );\n}\n```\n\n**After**\n\n```jsx\nimport { Add } from '@carbon/react/icons';\n\nfunction MyComponent() {\n  return (\n    <>\n      <Add size={32} />\n      <Add size={24} />\n      <Add size={20} />\n      <Add />\n    </>\n  );\n}\n```\n\nWith this change, you can now import icons from `@carbon/react` directly by\nwriting:\n\n```jsx\nimport { Add } from '@carbon/react/icons';\n```\n\n### Step 8: Update components that have changed\n\nIn v11, we have updated the APIs of certain components in one of the following\nways:\n\n- Update `className` usage to be applied to the outermost element of a component\n- Update `size` to have consistent values across the codebase\n- Remove props that have been deprecated in v10\n- Refactor the API to ship an accessible component\n\nFor a full list of changes to components, check out our\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbon-components-react).\nBelow are some common changes that may impact you and your usage of Carbon.\n\n#### Changes to `className`\n\nThe usage of `className` prop has been updated so that the class is passed to\nthe outermost element of a component's inner markup. This was already the case\nfor most components and this change brings along the remaining components in the\nlibrary to this convention.\n\nThe following components previously were not applying the `className` prop to\nthe outermost element. If you were using a custom `className` to target an inner\nelement for any of these components, you will have to update your selectors to\nnow account for the `className` being placed on the outermost element.\n\n- Checkbox\n- ComboBox\n- Table\n- TableToolbar\n- DataTableSkeleton\n- DatePicker\n- DatePickerSkeleton\n- DatePickerInput\n- Dropdown\n- FileUploaderDropContainer\n- FileUploaderItem\n- FormGroup\n- FilterableMultiSelect\n- MultiSelect\n- NotificationTextDetails\n- NotificationIcon\n- NumberInput\n- OverflowMenuItem\n- RadioButtonGroup\n- RadioTile\n- Select\n- Slider\n- Switch\n- TextArea\n- ControlledPasswordInput\n- PasswordInput\n- TextInput\n- TimePicker\n- Tooltip\n- HeaderContainer\n\n#### Changes to `size`\n\nComponents with size variants have been updated to use the same API options.\nPreviously, the size options were inconsistent: `field`, `medium`, `short`. Now,\nsize options fall under the following values:\n\n| Prop value | Size |\n| ---------- | ---- |\n| `xs`       | 24px |\n| `sm`       | 32px |\n| `md`       | 40px |\n| `lg`       | 48px |\n| `xl`       | 64px |\n| `2xl`      | 80px |\n\n**Note:** the default size in v11 is `md` (`40px`).\n\nThe following components all have size variants that may be affected in your\ncode. To update, you will need to switch to one of the size options above.\n\n- Accordion\n- Button\n- ComboBox\n- Dropdown\n- Multiselect\n- Filterable multiselect\n- ContentSwitcher\n- DataTable\n- DatePicker\n- FileUploader\n- FileUploaderItem\n- FileUploaderDropContainer\n- FileUploaderButton\n- Link\n- Modal\n- ComposedModal\n- NumberInput\n- OverflowMenu\n- Search\n- Select\n- Tag\n- TextInput\n- TimePicker\n- Toggle\n\n#### Notification\n\nWe have updated the notification components to be more accessible out of the\nbox. `ToastNotification` and `InlineNotification` now have `role=\"status\"` by\ndefault with additional `role` options of `log` and `alert`. These components do\nnot receive focus and should be used for information-only use cases. These\ncomponents no longer accept actions or interactive children.\n\nFor notifications requiring an action, a new `ActionableNotifiation` component\nis available. It has a `role=\"alertdialog\"` and recieves focus by default.\nAutomatic placement of focus can be turned off via the new `hasFocus` prop.\n\nAll notifications have a new optional `closeOnEscape` prop, it enables\nnotifications to closed by pressing the `escape` key. For more details, see the\n[notification components accessibility page](https://v11.carbondesignsystem.com/components/notification/accessibility).\n\n#### Update `ToastNotification` usage\n\n- `children` can no longer contain interactive elements. A `ToastNotification`\n  containing an action or interactive children should be replaced with\n  `ActionableNotification`.\n- The `notificationType` prop is no longer needed and can be removed.\n- The default `role` is now `status`. `log` and `alert` can also be used.\n- The `closeOnEscape` prop toggles the closing of notifications via the `escape`\n  key.\n\n#### Update `InlineNotification` usage\n\n- The `actions` prop has been removed. An `InlineNotification` containing an\n  action or interactive children should be replaced with\n  `ActionableNotification` configured with the `inline` prop.\n- `children` can no longer contain interactive elements.\n- The `notificationType` prop is no longer needed and can be removed.\n- The default `role` is now `status`. `log` and `alert` can also be used.\n- The `closeOnEscape` prop toggles the closing of notifications via the `escape`\n  key.\n\n#### When using `ActionableNotification`:\n\n- The `inline` prop enables a styling variation resulting in a similar visual\n  design to `InlineNotification`.\n- The `actionButtonLabel` prop configures the action button text.\n- The `hasFocus` prop toggles the automatic placement of focus.\n- The `closeOnEscape` prop toggles the closing of notifications via the `escape`\n  key.\n\n#### Tabs\n\nTabs have been updated to be more composable so that you have the flexibity and\ncontrol to make them look and act how you want.\n\nIn v10, you may have code that looks like the following:\n\n```js\n<Tabs>\n  <Tab label=\"Tab label 1\">\n    <p>Content for first tab goes here.</p>\n  </Tab>\n  <Tab label=\"Tab label 2\">\n    <p>Content for second tab goes here.</p>\n  </Tab>\n  <Tab label=\"Tab label 3\" disabled>\n    <p>Content for third tab goes here.</p>\n  </Tab>\n  <Tab\n    label=\"Tab label 4 shows truncation\"\n    title=\"Tab label 4 shows truncation\"\n  >\n    <p>Content for fourth tab goes here.</p>\n  </Tab>\n</Tabs>\n```\n\nThose same Tabs, migrated to v11:\n\n```js\n<Tabs>\n  <TabList>\n    <Tab>Tab Label 1</Tab>\n    <Tab>Tab Label 2</Tab>\n    <Tab disabled>Tab Label 3</Tab>\n    <Tab title=\"Tab Label 4 shows truncation\">Tab Label 4 shows truncation</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>Content for first tab goes here.</TabPanel>\n    <TabPanel>Content for second tab goes here.</TabPanel>\n    <TabPanel>Content for third tab goes here.</TabPanel>\n    <TabPanel>Content for fourth tab goes here.</TabPanel>\n  </TabPanels>\n</Tabs>\n```\n\n#### Update `Tabs` and `Tab` usage\n\nAll the same functionality for Tabs is available in v11 and more! However, some\nprops have been deprecated becuase they have either been renamed or are no\nlonger needed. Below are the minor tweaks in naming or implementation.\n\n- the `type` prop is deprecated. Both \"container\" and \"default\" tabs still exist\n  but now can be called by adding the prop `contained` to the `TabList`.\n- Default tabs are now referred to as line tabs in our documentation here and in\n  our storybook.\n- `hidden` prop is no longer needed with the new composable Tabs. You have\n  control over tab content and when it is hidden through the `TabPanel` and\n  `TabPanels` components.\n- `selected` prop is now named `selectedIndex`.\n- `tabContentClassName` is no longer needed. `TabPanel` (equivalent to tab\n  content) takes in a className prop on its outermost node.\n- For `Tab`, `label` is no longer needed. `children` of `Tab` are now the label.\n- Due to its composability, `renderAnchor`, `renderButton`, `renderContent` are\n  no longer needed on `Tab`. You now have full control over what is rendered\n  inside of `Tab` and `TabPanel`.\n- Because `renderButton` is no longer needed, the associated `tabIndex` prop has\n  also been deprecated.\n- `selected` on `Tab` is deprecated in favor or `selectedIndex`, now placed on\n  `Tabs` instead.\n\nFor more details about the changes to Tabs, see our storybook documentation\n[here](https://react.carbondesignsystem.com/?path=/docs/components-tabs--default).\n\n### Step 9: Done with @carbon/react!\n\nAnd that's it! You're done. At this point you have migrated to use Carbon v11\nusing the `@carbon/react` package.\n\nIf you run into any problems after this point, please feel free to reach out to\nus over on Slack or open up a discussion on\n[GitHub](https://github.com/carbon-design-system/carbon/discussions/categories/help).\nWe want to make this migration experience as seamless as possible and will be\nmonitoring both areas to help out.\n\n## carbon-components\n\nStarting in v11, the styles for Carbon live in the `@carbon/styles` package.\nAlternatively, you can continue to use `carbon-components` as it re-exports\nstyles from this package directly.\n\n<InlineNotification>\n\nIf you are using carbon-components-react, you can bring in styles directly from\nthe new package @carbon/react. To learn more, visit the\n[carbon-components-react](#carbon-components-react) section.\n\n</InlineNotification>\n\n### Step 1: Install @carbon/styles\n\nTo get started, uninstall `carbon-components` from your project:\n\n```bash\nnpm uninstall carbon-components\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn remove carbon-components\n```\n\nNext, install the `@carbon/styles` package:\n\n```bash\nnpm install @carbon/styles\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn add @carbon/styles\n```\n\n### Step 2: Install Dart Sass\n\nPreviously, `carbon-components` supported being compiled by different Sass\nlibraries. Starting in v11, the `@carbon/styles` package requires Dart Sass\nthrough the `sass` package in order to compile. This change comes from our\nmigration to Sass Modules in order to improve our compilation times and overall\nproject structure.\n\nIf you don't have this dependency already in your project, you can install it:\n\n```bash\nnpm install sass\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn add sass\n```\n\nSimilarly, if you currently use `node-sass` now is a good time to remove that\ndependency from your project. In most situations, Dart Sass is a drop-in\nreplacement for `node-sass` and should require no changes on your end in order\nto use it once you install the dependency.\n\n### Step 3: Setup Dart Sass\n\nOne you have Dart Sass installed, it's important that you configure your project\nto support resolving imports in Sass from `node_modules`. Typically, this means\nadding `node_modules` to your `includePaths` config for Sass in your bundler or\ntoolchain of choice.\n\nTo learn more about how to configure your specific toolchain to support this,\nread the documentation for configuration\n[here](https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#configuration).\nWe also have published a guide over on\n[Medium](https://medium.com/carbondesign/migrating-from-node-sass-to-sass-eba9db004a3a)\nto help out with common problems that come from this migration.\n\n### Step 4: Update import paths\n\nIn v10, you may have been bringing in styles from `carbon-components` by either\nimporting the styles directly with:\n\n```scss\n@import 'carbon-components/scss/globals/scss/styles.scss';\n```\n\nOr, you imported the styles through specific entrypoints:\n\n```scss\n// Feature flags\n$feature-flags: (\n  enable-columns-16: true,\n);\n// Options\n$css--default-type: true;\n$css--reset: true;\n// Top-level imports\n@import 'carbon-components/scss/globals/scss/vars';\n@import 'carbon-components/scss/globals/scss/colors';\n@import 'carbon-components/scss/globals/scss/theme';\n@import 'carbon-components/scss/globals/scss/spacing';\n@import 'carbon-components/scss/globals/scss/typography';\n@import 'carbon-components/scss/globals/scss/css--reset';\n@import 'carbon-components/scss/globals/scss/css--body';\n// Component imports\n@import 'carbon-components/scss/components/accordion/accordion';\n@import 'carbon-components/scss/components/button/button';\n```\n\nIf you imported the entrypoint from `carbon-components`, you can now do this\ndirectly from `@carbon/styles` without any additional paths by writing:\n\n```scss\n@use '@carbon/styles';\n```\n\nIf you were providing any configuration options before you imported Carbon you\ncan now provide them using the `with` syntax:\n\n```scss\n@use '@carbon/styles' with ($css--default-type: true, $css--reset: true);\n```\n\nIf you were using any feature flags in v10, you can safely remove them in v11.\n\n**Note:** you can also use `@import` to bring in Carbon, if you prefer, although\n`@use` is recommended.\n\nIf you were bringing parts of Carbon, you'll need to update the paths to reflect\nthe new paths in `@carbon/styles`. In general, most paths moved from\n`scss/globals/scss/filename` to `scss/filename`.\n\n```scss\n// Configuration\n@use '@carbon/styles/scss/config' with\n  ($css--default-type: true, $css--reset: true);\n// Reset\n@use '@carbon/styles/scss/reset';\n// Grid\n@use '@carbon/styles/scss/grid';\n// Helpers\n@use '@carbon/styles/scss/theme';\n@use '@carbon/styles/scss/spacing';\n@use '@carbon/styles/scss/type';\n// Components\n@use '@carbon/styles/scss/components/accordion';\n@use '@carbon/styles/scss/components/button';\n```\n\nFor a full list of the paths that have changed in `carbon-components`, check out\nour\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#changing-import-paths-from-scssglobalsscss-to-scss).\n\n### Step 5: Update imports\n\nIf you were using specific variables, mixins, or functions from Carbon, it may\nbe that you will need to update their name in v11. In general, all `carbon--`\nprefixed names have been renamed to drop the `carbon--` prefix.\n\nFor a full list of the changes to variables, mixins, and functions that have\nchanged, check out our\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#changing-import-paths-from-scssglobalsscss-to-scss)\nand find the specific file that you were importing from.\n\nFor a full list of the paths that have changed in `carbon-components`, check out\nour\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#changing-import-paths-from-scssglobalsscss-to-scss).\n\n### Step 6: Update bx to cds\n\nIf you are targeting specific selectors that use the `bx` prefix, you will need\nto update your code to either target the `cds` prefix for selectors or update\nCarbon's configuration to use `bx` as the prefix by writing the following:\n\n```scss\n// Option A\n@use '@carbon/styles' with ($prefix: 'bx');\n// Option B\n@use '@carbon/styles/scss/config' with ($prefix: 'bx');\n```\n\n### Step 7: Enable flexbox grid\n\nIf you are using the flexbox-based grid in your project, you can continue to use\nthis feature in v11 by importing the following:\n\n```scss\n@use '@carbon/styles/scss/grid/flexbox';\n```\n\nThis is important due to the fact that the CSS Grid implementation is used by\ndefault in v11. However, bringing in the flexbox grid styles in this way means\nthat your layouts will continue to work the same as in v10.\n\n### Step 8: Update color tokens\n\nIf you are using color tokens from Carbon, you can either update to use the new\ntokens in v11 or use the compatability theme for incremental adoption of the new\ntokens while maintaining existing work from v10.\n\nFor an overview of the changes to tokens, check out our\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#design-tokens).\n\nIf you would like to use the compatability theme, you can write the following in\nyour project where you are currently bringing in theme:\n\n```scss\n@use '@carbon/themes/scss/compat/themes' as compat;\n@use '@carbon/themes/scss/themes';\n@use '@carbon/themes/scss/theme' with\n  ($fallback: compat.$g100, $theme: themes.$g100);\n```\n\nDoing this will allow you to use tokens from the g100 theme in v10 along with\nthe tokens in v11. This will work for any of the themes in v10 including white,\ng10, g90, and g100.\n\n### Step 9: Done with @carbon/styles!\n\nAnd that's it! You're done. At this point you have migrated to use Carbon v11\nusing the `@carbon/styles` package.\n\nIf you run into any problems after this point, please feel free to reach out to\nus over on Slack or open up a discussion on\n[GitHub](https://github.com/carbon-design-system/carbon/discussions/categories/help).\nWe want to make this migration experience as seamless as possible and will be\nmonitoring both areas to help out.\n\n## @carbon/icons-react\n\nThe `@carbon/icons-react` package has been updated to minimize the number of\nexports from the package to help reduce build and compile times. It also has\nbeen updated to remove icons that were deprecated in v10.\n\n<InlineNotification>\n\nIf you are using @carbon/react, you can now import icons directly from\n@carbon/react/icons.\n\n</InlineNotification>\n\n### Changes to size\n\nThis update includes a change to the API of the icon components that come from\nthis package. Previously, we would export icons that included the size of the\nasset. This update allows you to bring the icon directly and specify the size\nusing the `size` prop.\n\n**Before**\n\n```jsx\nimport { Add32, Add24, Add20, Add16 } from '@carbon/icons-react';\n\nfunction MyComponent() {\n  return (\n    <>\n      <Add32 />\n      <Add24 />\n      <Add20 />\n      <Add16 />\n    </>\n  );\n}\n```\n\n**After**\n\n```jsx\nimport { Add } from '@carbon/icons-react';\n\nfunction MyComponent() {\n  return (\n    <>\n      <Add size={32} />\n      <Add size={24} />\n      <Add size={20} />\n      <Add />\n    </>\n  );\n}\n```\n\n### Removed icons\n\nThe following deprecated icons have been removed. Use the table below to find\ntheir replacement, if available, in v11.\n\n| Asset                           | v10                         | v11                         |\n| :------------------------------ | :-------------------------- | :-------------------------- |\n| app-switcher                    | AppSwitcher                 | Switcher                    |\n| arrows                          | Arrows                      | ArrowsVertical              |\n| back-to-top                     | BackToTop                   | UpToTop                     |\n| checkbox--undeterminate         | CheckboxUndeterminate       | CheckboxIndeterminate       |\n| checkbox--undeterminate--filled | CheckboxUndeterminateFilled | CheckboxIndeterminateFilled |\n| cloud--lightning                | CloudLightning              | Removed                     |\n| cloud--rain                     | CloudRain                   | Removed                     |\n| cloud--snow                     | CloudSnow                   | Removed                     |\n| delete                          | Delete                      | TrashCan                    |\n| edit-filter                     | EditFilter                  | FilterEdit                  |\n| sunny                           | Sunny                       | Removed                     |\n| research--bloch-sphere          | ResearchBlockSphere         | BlochSphere                 |\n| research--hinton-plot           | ResearchHintonPlot          | HintonPlot                  |\n| research--matrix                | ResearchMatrix              | Matrix                      |\n| misuse--alt                     | MisuseAlt                   | MisuseOutline               |\n| logo--google                    | LogoGoogle                  | Removed                     |\n| mammogram--stacked              | MammogramStacked            | Removed                     |\n| logo--delicious                 | LogoDelicious               | Removed                     |\n| logo--stumbleupon               | LogoStumbleUpon             | Removed                     |\n| letter--Aa--large               | LetterAaLarge               | TextFont                    |\n| glyph--caution-inverted         | GlyphCautionInverted        | CautionInverted             |\n| glyph--caution                  | GlyphCaution                | Caution                     |\n| glyph--circle-fill              | GlyphCircleFill             | CircleFill                  |\n| glyph--circle-stroke            | GlyphCircleStroke           | CircleStroke                |\n| glyph--critical                 | GlyphCritical               | Critical                    |\n| glyph--incomplete               | GlyphIncomplete             | Incomplete                  |\n| glyph--square-fill              | GlyphSquareFill             | SquareFill                  |\n| glyph--undefined                | GlyphUndefined              | Undefined                   |\n\n## carbon-icons\n\nThe `carbon-icons` package has been deprecated and is no longer supported. To\nuse icons from the Carbon Design System, you should install the appropriate\nlibrary to use with your framework:\n\n| Package                 | Framework          | Link                                                    |\n| :---------------------- | :----------------- | :------------------------------------------------------ |\n| `@carbon/icons-react`   | React              | [Link](https://npmjs.com/package/@carbon/icons-react)   |\n| `@carbon/icons-angular` | Angular            | [Link](https://npmjs.com/package/@carbon/icons-angular) |\n| `@carbon/icons-vue`     | Vue                | [Link](https://npmjs.com/package/@carbon/icons-vue)     |\n| `carbon-icons-svelte`   | Svelte             | [Link](https://npmjs.com/package/carbon-icons-svelte)   |\n| `@carbon/icons`         | Vanilla JavaScript | [Link](https://npmjs.com/package/@carbon/icons)         |\n\nIf you are using `@carbon/react`, you can directly import icons from\n`@carbon/react/icons`.\n\n## Elements\n\nThe packages that we ship for the IBM Design Language have been updated in v11.\nThe most notable change is that these packages now require Dart Sass in order to\ncompile as they now use Sass Modules to improve compilation times.\n\nIf you were directly importing from one of these element packages, consider\nimporting from either `@carbon/styles` or `@carbon/react` instead. Both of these\npackages provide entrypoints for elements packages on top of the styles for\nCarbon itself.\n\nFor teams using these packages directly, you will need to update each of the\nelements packages you're using to the latest version.\n\n```bash\nnpm install @carbon/<package-name>@latest\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn upgrade @carbon/<package-name>@latest\n```\n\nAfterwards, you will need to update the import paths and import names themselves\nthat you bring in. In general, each package now supports importing from the\npackage directly and all `carbon--` prefixed variables, mixins, and functions\nhave been renamed to remove the prefix.\n\nFor full details fo the changes to each elements package, check out the links\nbelow.\n\n| Package            | Migration Docs                                                                                        |\n| :----------------- | :---------------------------------------------------------------------------------------------------- |\n| `@carbon/colors`   | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carboncolors)   |\n| `@carbon/elements` | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbonelements) |\n| `@carbon/grid`     | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbongrid)     |\n| `@carbon/layout`   | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbonlayout)   |\n| `@carbon/motion`   | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbonmotion)   |\n| `@carbon/themes`   | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbonthemes)   |\n| `@carbon/type`     | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbontype)     |\n\nIf you were previously using the `@carbon/import-once` package, you can continue\nto use this in v11. However, this package will receive no further updates after\nCarbon switched to using Sass Modules.\n","type":"Mdx","contentDigest":"cf5978c9c8fadcd6aa79d3ad55247679","owner":"gatsby-plugin-mdx","counter":4374},"frontmatter":{"title":"Guide","description":"This guide includes everything you need to migrate your offering from v10 to v11 of Carbon.","tabs":["Overview","Design","Develop"]},"exports":{},"rawBody":"---\ntitle: Guide\ndescription:\n  This guide includes everything you need to migrate your offering from v10 to\n  v11 of Carbon.\ntabs: ['Overview', 'Design', 'Develop']\n---\n\nimport { Tag } from '@carbon/react';\n\n<PageDescription>\n\nStep-by-step guide to updating your code from Carbon v10 to v11.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>carbon-components-react</AnchorLink>\n<AnchorLink>carbon-components</AnchorLink>\n<AnchorLink>@carbon/icons-react</AnchorLink>\n<AnchorLink>carbon-icons</AnchorLink>\n<AnchorLink>Elements</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nThis guide helps you update your project to Carbon v11. It is broken into\nsections based on packages that you are using in your project today. For most\nteams using Carbon, you'll want to use the\n[`carbon-components-react`](#carbon-components-react) section.\n\nOne of the biggest changes coming to Carbon in v11 is that we are moving to\ndedicated packages under the `@carbon` scope. What this means for you is that if\nyou were previously using the following packages:\n\n- `carbon-components`\n- `carbon-components-react`\n- `carbon-icons`\n- `@carbon/icons-react`\n\nYou can access all of this work under one single package: `@carbon/react`. This\npackage will re-export all of the styles and icons for Carbon all in one\ndependency.\n\nIf you were previously using `carbon-components`, the styles from this package\nare available under `@carbon/styles`. They are also re-exported through\n`@carbon/react`\n\nBoth the `carbon-components` and `carbon-components-react` packages will stick\naround in v11 but they will only be re-exports of `@carbon/styles` and\n`@carbon/react` respectively.\n\n<InlineNotification>\n  Some of the migration steps below can be automated using the `@carbon/upgrade`\n  CLI. For full details, see the [`@carbon/upgrade` package\n  documentation](https://github.com/carbon-design-system/carbon/tree/main/packages/upgrade)\n</InlineNotification>\n\n## carbon-components-react\n\nStarting in v11, the React components for Carbon live in the `@carbon/react`\npackage. Alternatively, you can continue to use `carbon-components` as it\nre-exports components from the `@carbon/react` package.\n\nThe `@carbon/react` package also includes the styles for Carbon along with\nicons.\n\n### Step 1: Install @carbon/react\n\nTo get started, uninstall the following packages if they exist in your project:\n\n- `carbon-components`\n- `carbon-components-react`\n- `carbon-icons`\n- `@carbon/icons-react`\n\n```bash\nnpm uninstall carbon-components carbon-components-react carbon-icons @carbon/icons-react\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn remove carbon-components carbon-components-react carbon-icons @carbon/icons-react\n```\n\nNext, install the `@carbon/react` package:\n\n```bash\nnpm install @carbon/react\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn add @carbon/react\n```\n\n### Step 2: Styles and Dart Sass\n\nIf you're importing styles from `carbon-components`, you can now import styles\ndirectly from `@carbon/react` or the `@carbon/react/scss` folder.\n\nBefore you're able to bring in these styles, you'll need to make sure your\nproject is setup to use Dart Sass. Starting in v11, Carbon styles requires Dart\nSass through the `sass` package in order to compile. This change comes from our\nmigration to Sass Modules in order to improve our compilation times and overall\nproject structure.\n\nIf you don't have this dependency already in your project, you can install it:\n\n```bash\nnpm install sass\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn add sass\n```\n\nSimilarly, if you currently use `node-sass` now is a good time to remove that\ndependency from your project. In most situations, Dart Sass is a drop-in\nreplacement for `node-sass` and should require no changes on your end in order\nto use it once you install the dependency.\n\n### Step 3: Setup Dart Sass for your project\n\nOnce you have Dart Sass installed, it's important that you configure your\nproject to support resolving imports in Sass from `node_modules`. Typically,\nthis means adding `node_modules` to your `includePaths` config for Sass in your\nbundler or toolchain of choice.\n\nTo learn more about how to configure your specific toolchain to support this,\nread the documentation for configuration\n[here](https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#configuration).\nWe also have published a guide over on\n[Medium](https://medium.com/carbondesign/migrating-from-node-sass-to-sass-eba9db004a3a)\nto help out with common problems that come from this migration.\n\n### Step 4: Update style import paths\n\nIn v10, you may have been bringing in styles from `carbon-components` by either\nimporting the styles directly with:\n\n```scss\n@import 'carbon-components/scss/globals/scss/styles.scss';\n```\n\nOr, you imported the styles through specific entrypoints:\n\n```scss\n// Feature flags\n$feature-flags: (\n  enable-columns-16: true,\n);\n// Options\n$css--default-type: true;\n$css--reset: true;\n// Top-level imports\n@import 'carbon-components/scss/globals/scss/vars';\n@import 'carbon-components/scss/globals/scss/colors';\n@import 'carbon-components/scss/globals/scss/theme';\n@import 'carbon-components/scss/globals/scss/spacing';\n@import 'carbon-components/scss/globals/scss/typography';\n@import 'carbon-components/scss/globals/scss/css--reset';\n@import 'carbon-components/scss/globals/scss/css--body';\n// Component imports\n@import 'carbon-components/scss/components/accordion/accordion';\n@import 'carbon-components/scss/components/button/button';\n```\n\nIf you imported the entrypoint from `carbon-components`, you can now do this\ndirectly from `@carbon/styles` without any additional paths by writing:\n\n```scss\n@use '@carbon/react';\n```\n\nIf you were providing any configuration options before you imported Carbon you\ncan now provide them using the `with` syntax:\n\n```scss\n@use '@carbon/react' with ($css--default-type: true, $css--reset: true);\n```\n\nIf you were using any feature flags in v10, you can safely remove them in v11.\n\n**Note:** you can also use `@import` to bring in Carbon, if you prefer, although\n`@use` is recommended.\n\nIf you were bringing parts of Carbon, you'll need to update the paths to reflect\nthe new paths in `@carbon/styles`. In general, most paths moved from\n`scss/globals/scss/filename` to `scss/filename`.\n\n```scss\n// Configuration\n@use '@carbon/react/scss/config' with\n  ($css--default-type: true, $css--reset: true);\n// Reset\n@use '@carbon/react/scss/reset';\n// Grid\n@use '@carbon/react/scss/grid';\n// Helpers\n@use '@carbon/react/scss/theme';\n@use '@carbon/react/scss/spacing';\n@use '@carbon/react/scss/type';\n// Components\n@use '@carbon/react/scss/components/accordion';\n@use '@carbon/react/scss/components/button';\n```\n\nFor a full list of the paths that have changed in `carbon-components`, check out\nour\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#changing-import-paths-from-scssglobalsscss-to-scss).\n\n**Note:** if you see any references to `@carbon/styles` for style imports, you\ncan safely replace the beginning of the path with `@carbon/react` for the same\nimport in this package.\n\n### Step 5: Update Sass imports\n\nIf you're project is currently importing from different parts of\n`carbon-components` for specific variables, mixins, or functions then you will\nneed to make sure that your imports have been updated to the correct path.\n\nThe full list of changes are available in our\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#changing-import-paths-from-scssglobalsscss-to-scss)\nbut, in general, most imports have been updates so that the `carbon--` is no\nlonger necessary.\n\n### Step 6: Update JavaScript imports\n\n<InlineNotification>\n  This step can be automated using the `@carbon/upgrade` CLI. For full details,\n  see the `@carbon/upgrade` [package\n  documentation](https://github.com/carbon-design-system/carbon/tree/main/packages/upgrade)\n</InlineNotification>\n\nAfter updating how you bring in styles, you will need to update your import\npaths from `carbon-components-react` to `@carbon/react` for components that\nyou're bringing from Carbon.\n\n```jsx\n// Before\nimport { Accordion, AccordionItem } from 'carbon-components-react';\n// After\nimport { Accordion, AccordionItem } from '@carbon/react';\n```\n\n### Step 7: Update icon imports\n\n<InlineNotification>\n  This step can be automated using the `@carbon/upgrade` CLI. For full details,\n  see the `@carbon/upgrade` [package\n  documentation](https://github.com/carbon-design-system/carbon/tree/main/packages/upgrade)\n</InlineNotification>\n\nThe `@carbon/icons-react` package has been updated to minimize the number of\nexports from the package to help reduce build and compile times. This package is\navailable under `@carbon/react/icons`.\n\nThis update includes a change to the API of the icon components that come from\nthis package. Previously, we would export icons that included the size of the\nasset. This update allows you to bring the icon directly and specify the size\nusing the `size` prop.\n\n**Before**\n\n```jsx\nimport { Add32, Add24, Add20, Add16 } from '@carbon/icons-react';\n\nfunction MyComponent() {\n  return (\n    <>\n      <Add32 />\n      <Add24 />\n      <Add20 />\n      <Add16 />\n    </>\n  );\n}\n```\n\n**After**\n\n```jsx\nimport { Add } from '@carbon/react/icons';\n\nfunction MyComponent() {\n  return (\n    <>\n      <Add size={32} />\n      <Add size={24} />\n      <Add size={20} />\n      <Add />\n    </>\n  );\n}\n```\n\nWith this change, you can now import icons from `@carbon/react` directly by\nwriting:\n\n```jsx\nimport { Add } from '@carbon/react/icons';\n```\n\n### Step 8: Update components that have changed\n\nIn v11, we have updated the APIs of certain components in one of the following\nways:\n\n- Update `className` usage to be applied to the outermost element of a component\n- Update `size` to have consistent values across the codebase\n- Remove props that have been deprecated in v10\n- Refactor the API to ship an accessible component\n\nFor a full list of changes to components, check out our\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbon-components-react).\nBelow are some common changes that may impact you and your usage of Carbon.\n\n#### Changes to `className`\n\nThe usage of `className` prop has been updated so that the class is passed to\nthe outermost element of a component's inner markup. This was already the case\nfor most components and this change brings along the remaining components in the\nlibrary to this convention.\n\nThe following components previously were not applying the `className` prop to\nthe outermost element. If you were using a custom `className` to target an inner\nelement for any of these components, you will have to update your selectors to\nnow account for the `className` being placed on the outermost element.\n\n- Checkbox\n- ComboBox\n- Table\n- TableToolbar\n- DataTableSkeleton\n- DatePicker\n- DatePickerSkeleton\n- DatePickerInput\n- Dropdown\n- FileUploaderDropContainer\n- FileUploaderItem\n- FormGroup\n- FilterableMultiSelect\n- MultiSelect\n- NotificationTextDetails\n- NotificationIcon\n- NumberInput\n- OverflowMenuItem\n- RadioButtonGroup\n- RadioTile\n- Select\n- Slider\n- Switch\n- TextArea\n- ControlledPasswordInput\n- PasswordInput\n- TextInput\n- TimePicker\n- Tooltip\n- HeaderContainer\n\n#### Changes to `size`\n\nComponents with size variants have been updated to use the same API options.\nPreviously, the size options were inconsistent: `field`, `medium`, `short`. Now,\nsize options fall under the following values:\n\n| Prop value | Size |\n| ---------- | ---- |\n| `xs`       | 24px |\n| `sm`       | 32px |\n| `md`       | 40px |\n| `lg`       | 48px |\n| `xl`       | 64px |\n| `2xl`      | 80px |\n\n**Note:** the default size in v11 is `md` (`40px`).\n\nThe following components all have size variants that may be affected in your\ncode. To update, you will need to switch to one of the size options above.\n\n- Accordion\n- Button\n- ComboBox\n- Dropdown\n- Multiselect\n- Filterable multiselect\n- ContentSwitcher\n- DataTable\n- DatePicker\n- FileUploader\n- FileUploaderItem\n- FileUploaderDropContainer\n- FileUploaderButton\n- Link\n- Modal\n- ComposedModal\n- NumberInput\n- OverflowMenu\n- Search\n- Select\n- Tag\n- TextInput\n- TimePicker\n- Toggle\n\n#### Notification\n\nWe have updated the notification components to be more accessible out of the\nbox. `ToastNotification` and `InlineNotification` now have `role=\"status\"` by\ndefault with additional `role` options of `log` and `alert`. These components do\nnot receive focus and should be used for information-only use cases. These\ncomponents no longer accept actions or interactive children.\n\nFor notifications requiring an action, a new `ActionableNotifiation` component\nis available. It has a `role=\"alertdialog\"` and recieves focus by default.\nAutomatic placement of focus can be turned off via the new `hasFocus` prop.\n\nAll notifications have a new optional `closeOnEscape` prop, it enables\nnotifications to closed by pressing the `escape` key. For more details, see the\n[notification components accessibility page](https://v11.carbondesignsystem.com/components/notification/accessibility).\n\n#### Update `ToastNotification` usage\n\n- `children` can no longer contain interactive elements. A `ToastNotification`\n  containing an action or interactive children should be replaced with\n  `ActionableNotification`.\n- The `notificationType` prop is no longer needed and can be removed.\n- The default `role` is now `status`. `log` and `alert` can also be used.\n- The `closeOnEscape` prop toggles the closing of notifications via the `escape`\n  key.\n\n#### Update `InlineNotification` usage\n\n- The `actions` prop has been removed. An `InlineNotification` containing an\n  action or interactive children should be replaced with\n  `ActionableNotification` configured with the `inline` prop.\n- `children` can no longer contain interactive elements.\n- The `notificationType` prop is no longer needed and can be removed.\n- The default `role` is now `status`. `log` and `alert` can also be used.\n- The `closeOnEscape` prop toggles the closing of notifications via the `escape`\n  key.\n\n#### When using `ActionableNotification`:\n\n- The `inline` prop enables a styling variation resulting in a similar visual\n  design to `InlineNotification`.\n- The `actionButtonLabel` prop configures the action button text.\n- The `hasFocus` prop toggles the automatic placement of focus.\n- The `closeOnEscape` prop toggles the closing of notifications via the `escape`\n  key.\n\n#### Tabs\n\nTabs have been updated to be more composable so that you have the flexibity and\ncontrol to make them look and act how you want.\n\nIn v10, you may have code that looks like the following:\n\n```js\n<Tabs>\n  <Tab label=\"Tab label 1\">\n    <p>Content for first tab goes here.</p>\n  </Tab>\n  <Tab label=\"Tab label 2\">\n    <p>Content for second tab goes here.</p>\n  </Tab>\n  <Tab label=\"Tab label 3\" disabled>\n    <p>Content for third tab goes here.</p>\n  </Tab>\n  <Tab\n    label=\"Tab label 4 shows truncation\"\n    title=\"Tab label 4 shows truncation\"\n  >\n    <p>Content for fourth tab goes here.</p>\n  </Tab>\n</Tabs>\n```\n\nThose same Tabs, migrated to v11:\n\n```js\n<Tabs>\n  <TabList>\n    <Tab>Tab Label 1</Tab>\n    <Tab>Tab Label 2</Tab>\n    <Tab disabled>Tab Label 3</Tab>\n    <Tab title=\"Tab Label 4 shows truncation\">Tab Label 4 shows truncation</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>Content for first tab goes here.</TabPanel>\n    <TabPanel>Content for second tab goes here.</TabPanel>\n    <TabPanel>Content for third tab goes here.</TabPanel>\n    <TabPanel>Content for fourth tab goes here.</TabPanel>\n  </TabPanels>\n</Tabs>\n```\n\n#### Update `Tabs` and `Tab` usage\n\nAll the same functionality for Tabs is available in v11 and more! However, some\nprops have been deprecated becuase they have either been renamed or are no\nlonger needed. Below are the minor tweaks in naming or implementation.\n\n- the `type` prop is deprecated. Both \"container\" and \"default\" tabs still exist\n  but now can be called by adding the prop `contained` to the `TabList`.\n- Default tabs are now referred to as line tabs in our documentation here and in\n  our storybook.\n- `hidden` prop is no longer needed with the new composable Tabs. You have\n  control over tab content and when it is hidden through the `TabPanel` and\n  `TabPanels` components.\n- `selected` prop is now named `selectedIndex`.\n- `tabContentClassName` is no longer needed. `TabPanel` (equivalent to tab\n  content) takes in a className prop on its outermost node.\n- For `Tab`, `label` is no longer needed. `children` of `Tab` are now the label.\n- Due to its composability, `renderAnchor`, `renderButton`, `renderContent` are\n  no longer needed on `Tab`. You now have full control over what is rendered\n  inside of `Tab` and `TabPanel`.\n- Because `renderButton` is no longer needed, the associated `tabIndex` prop has\n  also been deprecated.\n- `selected` on `Tab` is deprecated in favor or `selectedIndex`, now placed on\n  `Tabs` instead.\n\nFor more details about the changes to Tabs, see our storybook documentation\n[here](https://react.carbondesignsystem.com/?path=/docs/components-tabs--default).\n\n### Step 9: Done with @carbon/react!\n\nAnd that's it! You're done. At this point you have migrated to use Carbon v11\nusing the `@carbon/react` package.\n\nIf you run into any problems after this point, please feel free to reach out to\nus over on Slack or open up a discussion on\n[GitHub](https://github.com/carbon-design-system/carbon/discussions/categories/help).\nWe want to make this migration experience as seamless as possible and will be\nmonitoring both areas to help out.\n\n## carbon-components\n\nStarting in v11, the styles for Carbon live in the `@carbon/styles` package.\nAlternatively, you can continue to use `carbon-components` as it re-exports\nstyles from this package directly.\n\n<InlineNotification>\n\nIf you are using carbon-components-react, you can bring in styles directly from\nthe new package @carbon/react. To learn more, visit the\n[carbon-components-react](#carbon-components-react) section.\n\n</InlineNotification>\n\n### Step 1: Install @carbon/styles\n\nTo get started, uninstall `carbon-components` from your project:\n\n```bash\nnpm uninstall carbon-components\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn remove carbon-components\n```\n\nNext, install the `@carbon/styles` package:\n\n```bash\nnpm install @carbon/styles\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn add @carbon/styles\n```\n\n### Step 2: Install Dart Sass\n\nPreviously, `carbon-components` supported being compiled by different Sass\nlibraries. Starting in v11, the `@carbon/styles` package requires Dart Sass\nthrough the `sass` package in order to compile. This change comes from our\nmigration to Sass Modules in order to improve our compilation times and overall\nproject structure.\n\nIf you don't have this dependency already in your project, you can install it:\n\n```bash\nnpm install sass\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn add sass\n```\n\nSimilarly, if you currently use `node-sass` now is a good time to remove that\ndependency from your project. In most situations, Dart Sass is a drop-in\nreplacement for `node-sass` and should require no changes on your end in order\nto use it once you install the dependency.\n\n### Step 3: Setup Dart Sass\n\nOne you have Dart Sass installed, it's important that you configure your project\nto support resolving imports in Sass from `node_modules`. Typically, this means\nadding `node_modules` to your `includePaths` config for Sass in your bundler or\ntoolchain of choice.\n\nTo learn more about how to configure your specific toolchain to support this,\nread the documentation for configuration\n[here](https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#configuration).\nWe also have published a guide over on\n[Medium](https://medium.com/carbondesign/migrating-from-node-sass-to-sass-eba9db004a3a)\nto help out with common problems that come from this migration.\n\n### Step 4: Update import paths\n\nIn v10, you may have been bringing in styles from `carbon-components` by either\nimporting the styles directly with:\n\n```scss\n@import 'carbon-components/scss/globals/scss/styles.scss';\n```\n\nOr, you imported the styles through specific entrypoints:\n\n```scss\n// Feature flags\n$feature-flags: (\n  enable-columns-16: true,\n);\n// Options\n$css--default-type: true;\n$css--reset: true;\n// Top-level imports\n@import 'carbon-components/scss/globals/scss/vars';\n@import 'carbon-components/scss/globals/scss/colors';\n@import 'carbon-components/scss/globals/scss/theme';\n@import 'carbon-components/scss/globals/scss/spacing';\n@import 'carbon-components/scss/globals/scss/typography';\n@import 'carbon-components/scss/globals/scss/css--reset';\n@import 'carbon-components/scss/globals/scss/css--body';\n// Component imports\n@import 'carbon-components/scss/components/accordion/accordion';\n@import 'carbon-components/scss/components/button/button';\n```\n\nIf you imported the entrypoint from `carbon-components`, you can now do this\ndirectly from `@carbon/styles` without any additional paths by writing:\n\n```scss\n@use '@carbon/styles';\n```\n\nIf you were providing any configuration options before you imported Carbon you\ncan now provide them using the `with` syntax:\n\n```scss\n@use '@carbon/styles' with ($css--default-type: true, $css--reset: true);\n```\n\nIf you were using any feature flags in v10, you can safely remove them in v11.\n\n**Note:** you can also use `@import` to bring in Carbon, if you prefer, although\n`@use` is recommended.\n\nIf you were bringing parts of Carbon, you'll need to update the paths to reflect\nthe new paths in `@carbon/styles`. In general, most paths moved from\n`scss/globals/scss/filename` to `scss/filename`.\n\n```scss\n// Configuration\n@use '@carbon/styles/scss/config' with\n  ($css--default-type: true, $css--reset: true);\n// Reset\n@use '@carbon/styles/scss/reset';\n// Grid\n@use '@carbon/styles/scss/grid';\n// Helpers\n@use '@carbon/styles/scss/theme';\n@use '@carbon/styles/scss/spacing';\n@use '@carbon/styles/scss/type';\n// Components\n@use '@carbon/styles/scss/components/accordion';\n@use '@carbon/styles/scss/components/button';\n```\n\nFor a full list of the paths that have changed in `carbon-components`, check out\nour\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#changing-import-paths-from-scssglobalsscss-to-scss).\n\n### Step 5: Update imports\n\nIf you were using specific variables, mixins, or functions from Carbon, it may\nbe that you will need to update their name in v11. In general, all `carbon--`\nprefixed names have been renamed to drop the `carbon--` prefix.\n\nFor a full list of the changes to variables, mixins, and functions that have\nchanged, check out our\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#changing-import-paths-from-scssglobalsscss-to-scss)\nand find the specific file that you were importing from.\n\nFor a full list of the paths that have changed in `carbon-components`, check out\nour\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#changing-import-paths-from-scssglobalsscss-to-scss).\n\n### Step 6: Update bx to cds\n\nIf you are targeting specific selectors that use the `bx` prefix, you will need\nto update your code to either target the `cds` prefix for selectors or update\nCarbon's configuration to use `bx` as the prefix by writing the following:\n\n```scss\n// Option A\n@use '@carbon/styles' with ($prefix: 'bx');\n// Option B\n@use '@carbon/styles/scss/config' with ($prefix: 'bx');\n```\n\n### Step 7: Enable flexbox grid\n\nIf you are using the flexbox-based grid in your project, you can continue to use\nthis feature in v11 by importing the following:\n\n```scss\n@use '@carbon/styles/scss/grid/flexbox';\n```\n\nThis is important due to the fact that the CSS Grid implementation is used by\ndefault in v11. However, bringing in the flexbox grid styles in this way means\nthat your layouts will continue to work the same as in v10.\n\n### Step 8: Update color tokens\n\nIf you are using color tokens from Carbon, you can either update to use the new\ntokens in v11 or use the compatability theme for incremental adoption of the new\ntokens while maintaining existing work from v10.\n\nFor an overview of the changes to tokens, check out our\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#design-tokens).\n\nIf you would like to use the compatability theme, you can write the following in\nyour project where you are currently bringing in theme:\n\n```scss\n@use '@carbon/themes/scss/compat/themes' as compat;\n@use '@carbon/themes/scss/themes';\n@use '@carbon/themes/scss/theme' with\n  ($fallback: compat.$g100, $theme: themes.$g100);\n```\n\nDoing this will allow you to use tokens from the g100 theme in v10 along with\nthe tokens in v11. This will work for any of the themes in v10 including white,\ng10, g90, and g100.\n\n### Step 9: Done with @carbon/styles!\n\nAnd that's it! You're done. At this point you have migrated to use Carbon v11\nusing the `@carbon/styles` package.\n\nIf you run into any problems after this point, please feel free to reach out to\nus over on Slack or open up a discussion on\n[GitHub](https://github.com/carbon-design-system/carbon/discussions/categories/help).\nWe want to make this migration experience as seamless as possible and will be\nmonitoring both areas to help out.\n\n## @carbon/icons-react\n\nThe `@carbon/icons-react` package has been updated to minimize the number of\nexports from the package to help reduce build and compile times. It also has\nbeen updated to remove icons that were deprecated in v10.\n\n<InlineNotification>\n\nIf you are using @carbon/react, you can now import icons directly from\n@carbon/react/icons.\n\n</InlineNotification>\n\n### Changes to size\n\nThis update includes a change to the API of the icon components that come from\nthis package. Previously, we would export icons that included the size of the\nasset. This update allows you to bring the icon directly and specify the size\nusing the `size` prop.\n\n**Before**\n\n```jsx\nimport { Add32, Add24, Add20, Add16 } from '@carbon/icons-react';\n\nfunction MyComponent() {\n  return (\n    <>\n      <Add32 />\n      <Add24 />\n      <Add20 />\n      <Add16 />\n    </>\n  );\n}\n```\n\n**After**\n\n```jsx\nimport { Add } from '@carbon/icons-react';\n\nfunction MyComponent() {\n  return (\n    <>\n      <Add size={32} />\n      <Add size={24} />\n      <Add size={20} />\n      <Add />\n    </>\n  );\n}\n```\n\n### Removed icons\n\nThe following deprecated icons have been removed. Use the table below to find\ntheir replacement, if available, in v11.\n\n| Asset                           | v10                         | v11                         |\n| :------------------------------ | :-------------------------- | :-------------------------- |\n| app-switcher                    | AppSwitcher                 | Switcher                    |\n| arrows                          | Arrows                      | ArrowsVertical              |\n| back-to-top                     | BackToTop                   | UpToTop                     |\n| checkbox--undeterminate         | CheckboxUndeterminate       | CheckboxIndeterminate       |\n| checkbox--undeterminate--filled | CheckboxUndeterminateFilled | CheckboxIndeterminateFilled |\n| cloud--lightning                | CloudLightning              | Removed                     |\n| cloud--rain                     | CloudRain                   | Removed                     |\n| cloud--snow                     | CloudSnow                   | Removed                     |\n| delete                          | Delete                      | TrashCan                    |\n| edit-filter                     | EditFilter                  | FilterEdit                  |\n| sunny                           | Sunny                       | Removed                     |\n| research--bloch-sphere          | ResearchBlockSphere         | BlochSphere                 |\n| research--hinton-plot           | ResearchHintonPlot          | HintonPlot                  |\n| research--matrix                | ResearchMatrix              | Matrix                      |\n| misuse--alt                     | MisuseAlt                   | MisuseOutline               |\n| logo--google                    | LogoGoogle                  | Removed                     |\n| mammogram--stacked              | MammogramStacked            | Removed                     |\n| logo--delicious                 | LogoDelicious               | Removed                     |\n| logo--stumbleupon               | LogoStumbleUpon             | Removed                     |\n| letter--Aa--large               | LetterAaLarge               | TextFont                    |\n| glyph--caution-inverted         | GlyphCautionInverted        | CautionInverted             |\n| glyph--caution                  | GlyphCaution                | Caution                     |\n| glyph--circle-fill              | GlyphCircleFill             | CircleFill                  |\n| glyph--circle-stroke            | GlyphCircleStroke           | CircleStroke                |\n| glyph--critical                 | GlyphCritical               | Critical                    |\n| glyph--incomplete               | GlyphIncomplete             | Incomplete                  |\n| glyph--square-fill              | GlyphSquareFill             | SquareFill                  |\n| glyph--undefined                | GlyphUndefined              | Undefined                   |\n\n## carbon-icons\n\nThe `carbon-icons` package has been deprecated and is no longer supported. To\nuse icons from the Carbon Design System, you should install the appropriate\nlibrary to use with your framework:\n\n| Package                 | Framework          | Link                                                    |\n| :---------------------- | :----------------- | :------------------------------------------------------ |\n| `@carbon/icons-react`   | React              | [Link](https://npmjs.com/package/@carbon/icons-react)   |\n| `@carbon/icons-angular` | Angular            | [Link](https://npmjs.com/package/@carbon/icons-angular) |\n| `@carbon/icons-vue`     | Vue                | [Link](https://npmjs.com/package/@carbon/icons-vue)     |\n| `carbon-icons-svelte`   | Svelte             | [Link](https://npmjs.com/package/carbon-icons-svelte)   |\n| `@carbon/icons`         | Vanilla JavaScript | [Link](https://npmjs.com/package/@carbon/icons)         |\n\nIf you are using `@carbon/react`, you can directly import icons from\n`@carbon/react/icons`.\n\n## Elements\n\nThe packages that we ship for the IBM Design Language have been updated in v11.\nThe most notable change is that these packages now require Dart Sass in order to\ncompile as they now use Sass Modules to improve compilation times.\n\nIf you were directly importing from one of these element packages, consider\nimporting from either `@carbon/styles` or `@carbon/react` instead. Both of these\npackages provide entrypoints for elements packages on top of the styles for\nCarbon itself.\n\nFor teams using these packages directly, you will need to update each of the\nelements packages you're using to the latest version.\n\n```bash\nnpm install @carbon/<package-name>@latest\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn upgrade @carbon/<package-name>@latest\n```\n\nAfterwards, you will need to update the import paths and import names themselves\nthat you bring in. In general, each package now supports importing from the\npackage directly and all `carbon--` prefixed variables, mixins, and functions\nhave been renamed to remove the prefix.\n\nFor full details fo the changes to each elements package, check out the links\nbelow.\n\n| Package            | Migration Docs                                                                                        |\n| :----------------- | :---------------------------------------------------------------------------------------------------- |\n| `@carbon/colors`   | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carboncolors)   |\n| `@carbon/elements` | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbonelements) |\n| `@carbon/grid`     | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbongrid)     |\n| `@carbon/layout`   | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbonlayout)   |\n| `@carbon/motion`   | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbonmotion)   |\n| `@carbon/themes`   | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbonthemes)   |\n| `@carbon/type`     | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbontype)     |\n\nIf you were previously using the `@carbon/import-once` package, you can continue\nto use this in v11. However, this package will receive no further updates after\nCarbon switched to using Sass Modules.\n","fileAbsolutePath":"/home/runner/work/carbon-website/carbon-website/src/pages/migrating/guide/develop.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}